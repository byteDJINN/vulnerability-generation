import * as express from 'express';
import * as xpath from 'xpath';
import * as dom from 'xmldom';

const app = express();
const xmlParser = new dom.DOMParser();

app.post('/search', (req, res) => {
    const userInput = req.body.query;
    const xmlData = `<countries><country name="USA"><city>New York</city></country><country name="France"><city>Paris</city></country></countries>`;

    const document = xmlParser.parseFromString(xmlData);
    const select = xpath.useNamespaces({ 'c': 'http://example.com/countries' });
    const result = select("//country[@name='" + userInput + "']/city/text()", document);

    res.send(result.toString());
});

app.listen(3000, () => {
    console.log('Server is running on port 3000');
});

/*"""DELIMITER
```
|CODE|```
The vulnerability in this code snippet lies in the XPath Injection present in the `/search` route. 

How the vulnerability works:
In the vulnerable code, the user input (`req.body.query`) is directly concatenated into the XPath query string without proper input validation or sanitization. This allows an attacker to manipulate the input to inject XPath code.

How it could be exploited:
An attacker could exploit this vulnerability by crafting a malicious input that alters the XPath query to access sensitive parts of the XML data, potentially extracting or modifying data that they are not authorized to access.

How to fix the vulnerability:
To prevent XPath Injection, input should be properly validated and sanitized before using it in XPath queries. One common approach is to use parameterized XPath queries where user input is treated as a parameter rather than being directly inserted into the query string. Additionally, input validation should be performed to ensure that only valid and expected values are used in the XPath queries.