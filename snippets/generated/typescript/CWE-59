import fs from 'fs';

function readPetProfile(petId: string) {
    const filePath = `/var/www/pets/${petId}.json`;
    const petProfile = fs.readFileSync(filePath, 'utf-8');
    return petProfile;
}

const petId = '123';
const petProfile = readPetProfile(petId);
console.log(petProfile);

/*"""DELIMITER
```
|CODE|```

### Vulnerability Explanation:
The vulnerability in this code snippet is due to the lack of proper sanitization and validation of the `petId` input parameter before constructing the file path. An attacker could potentially manipulate the `petId` parameter to access and read sensitive files outside the intended directory (`\var\www\pets\`) by using relative paths or symbolic links.

### Exploitation:
An attacker could exploit this vulnerability by providing a malicious `petId` value such as `../../some_sensitive_file` to traverse up the directory structure and access files containing sensitive information like login credentials, personal data, or system files.

### Fix:
To fix this vulnerability, you should validate and sanitize user input by ensuring that the `petId` parameter only contains allowed characters and does not allow directory traversal. One approach is to use a whitelist of allowed characters or perform input validation to ensure the `petId` is a valid identifier before constructing the file path.

Example fix:
```typescript
function readPetProfile(petId: string) {
    if (!/^[a-zA-Z0-9_-]+$/.test(petId)) {
        throw new Error('Invalid petId');
    }

    const filePath = `/var/www/pets/${petId}.json`;
    const petProfile = fs.readFileSync(filePath, 'utf-8');
    return petProfile;
}
```

Additionally, consider implementing proper file access controls and restricting the file path to a specific directory to prevent unauthorized access to sensitive files.