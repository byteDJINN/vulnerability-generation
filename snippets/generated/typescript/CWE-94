// In this code snippet, we are generating a dynamic SQL query to fetch grant proposals from a database based on user input

import db from 'database';

function fetchGrantProposals(userInput: string): GrantProposal[] {
    const query = `SELECT * FROM GrantProposals WHERE freelancerId = '${userInput}'`;

    const grantProposals: GrantProposal[] = db.query(query);

    return grantProposals;
}

/*"""DELIMITER
```
|CODE|```

Explanation:
The vulnerability in this code snippet is CWE-94, "Improper Control of Generation of Code ('Code Injection')". The code dynamically generates a SQL query by directly concatenating the user input `userInput` into the query string. If an attacker provides malicious input, they can manipulate the SQL query to perform SQL injection attacks.

Exploitation:
An attacker can exploit this vulnerability by providing a crafted input like `' OR 1=1 --`, which would modify the SQL query to `SELECT * FROM GrantProposals WHERE freelancerId = '' OR 1=1 --'`, causing the query to return all grant proposals instead of just the ones owned by the specified freelancer.

Fix:
To prevent SQL injection vulnerabilities, it is recommended to use parameterized queries or prepared statements instead of dynamically concatenating user input into the SQL query string. This way, input will be treated as data and not executable code, mitigating the risk of SQL injection attacks.