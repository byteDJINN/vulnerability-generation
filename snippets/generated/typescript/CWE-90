import express from 'express';
import ldap from 'ldapjs';

const app = express();

app.get('/search', (req, res) => {
  const username = req.query.username;
  
  const opts = {
    filter: `(cn=${username})`,
    scope: 'sub',
    attributes: ['dn']
  };

  const client = ldap.createClient({
    url: 'ldap://ldap.example.com:389'
  });

  client.search('dc=example,dc=com', opts, (err, ldapRes) => {
    ldapRes.on('searchEntry', (entry) => {
      console.log('entry: ' + JSON.stringify(entry.object));
    });
  });

  client.unbind(() => {
    console.log('Client disconnected');
  });

  res.send(`Searching for user: ${username}`);
});

app.listen(3000, () => {
  console.log('Server is running on port 3000');
});

/*"""DELIMITER
```
|CODE|```

### Vulnerability Explanation:
In the code snippet provided, the vulnerability lies in the way the user input (username) is directly interpolated into an LDAP filter without proper validation or sanitization. This makes the application susceptible to LDAP Injection.

### How the Vulnerability Can be Exploited:
An attacker can exploit this vulnerability by providing a malicious LDAP query as the 'username' parameter. For example, if the attacker submits a value like `*)(objectClass=*`, it could modify the original LDAP query to retrieve unintended data or execute arbitrary LDAP commands. This could lead to unauthorized access to sensitive data in the LDAP directory or disrupt the LDAP service.

### How to Fix the Vulnerability:
To fix this vulnerability, input validation and sanitization should be applied to prevent LDAP Injection. The 'username' parameter should be validated to ensure it contains only expected characters (such as alphanumeric characters) and does not include any LDAP query syntax. Additionally, parameterized LDAP queries should be used instead of concatenating user input directly into the filter string. By utilizing parameterized queries, the LDAP library will handle any necessary escaping of special characters, thereby mitigating the risk of LDAP Injection.