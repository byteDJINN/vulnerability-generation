class HauntedHouseExperience {
    description: string;

    constructor(description: string) {
        this.description = description;
    }

    displayExperience() {
        return `<div>${this.description}</div>`;
    }
}

const userDescription = "<img src=\"invalid.jpg\" onerror=\"alert('XSS Vulnerability')\">";
const newExperience = new HauntedHouseExperience(userDescription);
document.body.innerHTML = newExperience.displayExperience();

/*"""DELIMITER
```
|CODE|```

Explanation:
The vulnerability in this code snippet lies in the `displayExperience` method of the `HauntedHouseExperience` class. The method directly concatenates the `description` property into an HTML element without properly sanitizing or escaping the input. This allows an attacker to inject malicious code like JavaScript, leading to a Cross-Site Scripting (XSS) vulnerability.

Exploitation:
An attacker could craft a malicious input like `<img src="invalid.jpg" onerror="alert('XSS Vulnerability')">` which contains a script that triggers an alert when the image fails to load. When this input is provided and rendered on the web page using `document.body.innerHTML`, the script will execute, potentially allowing the attacker to steal sensitive information or perform unauthorized actions on behalf of the user.

Fix:
To fix this vulnerability, input data should always be properly sanitized and escaped before being included in HTML content to prevent the execution of scripts. One way to mitigate XSS attacks is by using DOM manipulation methods like `element.textContent` or `document.createElement` to create and update elements, rather than directly setting `innerHTML` with untrusted data. Additionally, implementing Content Security Policy (CSP) headers and input validation can provide further protection against XSS vulnerabilities.