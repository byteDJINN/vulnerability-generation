#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void create_file(char *filename) {
    char path[100];
    
    strcpy(path, "/home/user/uploads/");
    strcat(path, filename);
    
    FILE *file = fopen(path, "w");
    if (file != NULL) {
        fprintf(file, "Hello, World!");
        fclose(file);
        printf("File created successfully.\n");
    } else {
        printf("Failed to create file.\n");
    }
}

int main() {
    char user_input[50];

    printf("Enter the filename: ");
    scanf("%s", user_input);
    
    create_file(user_input);

    return 0;
}

/*"""DELIMITER
```
|CODE|```
- **Vulnerability Explanation:**

The vulnerability in the provided code is that it allows for directory traversal attacks due to improper limitation of the pathname. The `create_file` function constructs the path to the file by concatenating `/home/user/uploads/` with the user-provided `filename` without properly validating or sanitizing the input.

- **Exploitation:**

An attacker could exploit this vulnerability by providing a `filename` that includes `../` sequences, which could allow them to escape the intended directory (`/home/user/uploads/`) and potentially access or modify sensitive files in other directories on the system.

For example, if an attacker provided `../../../../../etc/passwd` as the `filename`, the resultant path would be `/home/user/uploads/../../../../../etc/passwd`, potentially allowing the attacker to access the `/etc/passwd` file.

- **Fix:**

To mitigate the path traversal vulnerability, it is essential to properly validate and enforce restrictions on the user input. One way to address this issue is to sanitize the `filename` input to ensure it does not contain any directory traversal sequences.

A safer approach would be to check if the filename contains any invalid characters (such as `../`) or restrict the filename to be alphanumeric only before constructing the file path. Additionally, limiting the write operation to only specific directories and restricting access rights can also help prevent directory traversal attacks.