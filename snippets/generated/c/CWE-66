#include <stdio.h>
#include <string.h>

void downloadRecipe(const char* recipeName) {
    char filePath[100];
    sprintf(filePath, "/var/www/recipes/%s.txt", recipeName);
    
    // Open file and read contents
    FILE* file = fopen(filePath, "r");
    if (file == NULL) {
        printf("Error: Recipe not found.\n");
    } else {
        char content[1000];
        fread(content, sizeof(char), 1000, file);
        printf("Recipe: %s\n", content);
        fclose(file);
    }
}

int main() {
    char userInput[50];
    printf("Enter the name of the recipe you want to download: ");
    gets(userInput);
    
    downloadRecipe(userInput);
    
    return 0;
}

/*"""DELIMITER
```
|CODE|```

This code snippet contains the vulnerability CWE-66 "Improper Handling of File Names that Identify Virtual Resources". This vulnerability arises from constructing file paths based on user input without proper validation. In this case, the `downloadRecipe` function builds the file path using the user-provided `recipeName` without any sanitization or validation to ensure it is safe.

Exploiting this vulnerability, an attacker could craft a malicious `recipeName` input such as "../../../../etc/passwd" to traverse directories and read sensitive system files. Without proper input validation, the attacker gains unauthorized access to files on the server.

To fix this vulnerability:
1. Implement proper input validation to restrict user-provided input to only alphanumeric characters and specific symbols necessary for filenames.
2. Use a whitelist approach to validate user input against a list of allowed characters and reject any input that does not adhere to the whitelist.
3. Avoid using user input directly to construct file paths. If user input is needed, sanitize and validate it before use to prevent directory traversal attacks.