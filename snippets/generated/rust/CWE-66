use std::fs::File;
use std::io::prelude::*;

fn load_recipe_file(filename: &str) -> String {
    let mut file = File::open(filename).expect("unable to open file");
    let mut contents = String::new();
    file.read_to_string(&mut contents).expect("unable to read file");
    contents
}

fn main() {
    let recipe_name = "cookies";
    let filename = format!("recipes/{}.txt", recipe_name);
    
    let recipe_content = load_recipe_file(&filename);
    println!("{}", recipe_content);
}

/*"""DELIMITER
```rust
|CODE|```
In this Rust code snippet, the vulnerability lies in the `load_recipe_file` function where it accepts a `filename` parameter without properly validating or sanitizing it. This vulnerability can lead to a directory traversal attack where an attacker can manipulate the `filename` input to access files outside of the intended directory.

For example, if an attacker passes in `"../secrets/passwords.txt"` as the `filename`, it could potentially read sensitive files like passwords.txt on the server's filesystem.

To fix this vulnerability, it is important to sanitize or validate the `filename` input before using it to construct a file path. You can use tools like `canonicalize` or `read_link` to resolve the path to its canonical form and ensure it does not escape from the intended directory. Additionally, consider whitelisting allowed file paths or using a secure file storage system to restrict access to specific directories.