public String getHauntedHouseDetails(String houseName) {
    return "<h2>Welcome to " + houseName + "!</h2>";
}

/*"""DELIMITER
```
|CODE|```

Explanation:
The code snippet contains a Cross-Site Scripting (XSS) vulnerability because it directly renders the variable `houseName` into HTML without proper sanitization or validation. An attacker can exploit this vulnerability by submitting a haunted house name containing malicious scripts that execute in the context of other users visiting the site.

Exploitation:
For example, if an attacker submits a haunted house name as `<script>alert('XSS Attack');</script>`, it will be reflected as HTML on the page and execute the script when displayed to other users, potentially stealing cookies, session tokens, or performing other malicious actions.

Mitigation:
To fix the XSS vulnerability, input validation and output encoding should be implemented. In this case, you can use libraries like OWASP Java Encoder to encode the user input before rendering it in HTML, which would prevent the execution of malicious scripts. An example fix using OWASP Java Encoder would be: 

```java
import org.owasp.encoder.Encode;

public String getHauntedHouseDetails(String houseName) {
    return "<h2>Welcome to " + Encode.forHtml(houseName) + "!</h2>";
}
```