import java.io.File;
import java.io.IOException;

public class RecipeExchange {
    public static void main(String[] args) {
        String recipeName = "cookie_recipe.txt";
        File recipeFile = new File("/recipes/" + recipeName);
        
        // Code to read the recipe file and do further processing
        try {
            if (!recipeFile.exists()) {
                throw new IOException("Recipe file not found");
            }
            
            // Read and process the recipe file
        } catch (IOException e) {
            System.out.println("Error reading recipe file: " + e.getMessage());
        }
    }
}

/*"""DELIMITER
```
|CODE|```

### Vulnerability Explanation:
The code snippet above is vulnerable to CWE-66 "Improper Handling of File Names that Identify Virtual Resources". In this case, the code constructs a file path based on user input (recipeName) without properly validating or sanitizing it. This can lead to an attacker manipulating the input to access arbitrary files on the system.

### How It Could Be Exploited:
An attacker could manipulate the `recipeName` variable to specify a file path that is outside the intended directory (`/recipes/` in this case). For example, an attacker could input `../somefile.txt` as the `recipeName`, which would resolve to a file path outside the `/recipes/` directory and potentially grant unauthorized access to sensitive files on the server.

### How It Could Be Fixed:
To fix this vulnerability, it is important to validate and sanitize user input before constructing file paths. One way to mitigate this issue is to restrict the allowed characters in the `recipeName` variable to prevent directory traversal attacks. Additionally, consider using a white-list approach where only known recipe file names are allowed to be accessed. It's also recommended to use a secure file storage system and implement proper access controls to limit file access.