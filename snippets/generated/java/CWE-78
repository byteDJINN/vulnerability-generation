public void executeCommand(String command) {
    Runtime.getRuntime().exec(command);
}

String userInput = request.getParameter("user_input");
executeCommand("echo " + userInput);

/*"""DELIMITER
```
|CODE|```

Explanation:
The code snippet above is vulnerable to OS Command Injection (CWE-78) because it takes user input directly and concatenates it into a command that is executed by the Java application using `Runtime.getRuntime().exec(command)`. An attacker can exploit this vulnerability by providing malicious input that includes additional commands or special characters to execute arbitrary commands on the operating system where the application is running.

For example, if the user provides the input `; ls -la`, the actual command executed will be `echo ; ls -la`, which will execute the `ls -la` command in addition to the intended `echo` command.

Fix:
To address this vulnerability, you should validate and sanitize user input to ensure that it does not contain any special characters or additional commands that could be executed. Preferably, you should use parameterized commands or safe APIs provided by the language or libraries to execute commands securely without direct user input concatenation.