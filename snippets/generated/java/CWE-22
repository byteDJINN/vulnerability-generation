import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

public class ArtisticCollaboration {

    public void uploadArtwork(String fileName, InputStream fileStream) throws IOException {
        File uploadedFile = new File("/var/www/uploads/" + fileName);
        try (OutputStream outputStream = new FileOutputStream(uploadedFile)) {
            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = fileStream.read(buffer)) != -1) {
                outputStream.write(buffer, 0, bytesRead);
            }
        }
    }
}

/*"""DELIMITER
```
|CODE|```

### Vulnerability Explanation:
In this code snippet, the vulnerability arises due to the improper limitation of a pathname to a restricted directory, leading to a Path Traversal vulnerability (CWE-22). The `uploadArtwork` method takes a file name and an input stream, and saves the file to the `/var/www/uploads/` directory. However, the file name provided is concatenated directly to the directory path without proper validation, allowing an attacker to potentially manipulate the file name to traverse outside the intended directory.

### Exploitation:
An attacker could exploit this vulnerability by providing a file name containing path traversal sequences, such as `../`, to navigate to sensitive directories on the server. For example, if the attacker uploads a file with the name `../../etc/passwd`, it could potentially overwrite system files or access confidential information.

### Fix:
To fix this vulnerability, it is essential to sanitize the file name before constructing the file path. One approach is to validate and restrict the file name to alphanumeric characters or a predefined set of allowed characters. Additionally, using a secure file naming convention or storing files with a unique identifier can prevent malicious path traversal attempts. Another effective measure is to use a whitelist approach where only allowed directories or files can be accessed/uploaded by the application.