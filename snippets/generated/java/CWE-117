public class BlogPostController {
    
    private final Logger logger = LoggerFactory.getLogger(BlogPostController.class);
    
    public void logBlogPost(String title, String author, String content) {
        String logMessage = "New blog post added: Title - " + title + ", Author - " + author;
        
        logger.info(logMessage);
    }

    // Other methods related to managing blog posts
    
}

/*"""DELIMITER
```
|CODE|```

Explanation:
In the provided code snippet, the vulnerability CWE-117 "Improper Output Neutralization for Logs" is present. This vulnerability arises when untrusted data (user input) is concatenated directly into log messages without proper sanitization, allowing potential attackers to inject malicious content into logs.

Exploitation of this vulnerability can lead to various consequences such as log forging, injection attacks, or even log injection leading to disclosure of sensitive information. Attackers could manipulate the log entries to alter the behavior of the application, obfuscate malicious activity, or gain unauthorized access by injecting commands.

To fix this vulnerability, it is important to properly sanitize any user-controlled input before incorporating it into log messages. One way to mitigate this issue is by using libraries or methods that handle escaping or sanitizing special characters in user input. In the context of Java logging, using parameterized logging methods provided by logging frameworks like SLF4J can help automatically sanitize and escape user data, preventing log injection attacks.