using System;
using System.IO;

class Logger
{
    private static string logFilePath = "log.txt";

    public static void LogMessage(string message)
    {
        using (StreamWriter sw = File.AppendText(logFilePath))
        {
            sw.WriteLine(DateTime.Now + " - " + message);
        }
    }
}

class Program
{
    static void Main(string[] args)
    {
        string username = "John_Doe";
        Logger.LogMessage("User " + username + " has logged in.");
    }
}

/*"""DELIMITER
```
|CODE|```

Explanation:
The vulnerability in this code snippet lies in the way the input provided by the user (username) is directly concatenated with the log message without proper sanitization or encoding. This could potentially allow an attacker to inject malicious content into the log file.

Exploitation:
An attacker could input a malicious script or redirect URL in the username field to execute a Cross-Site Scripting (XSS) attack. For example, if the attacker inputs `<script>alert('XSS attack!')</script>`, it would be written to the log file as-is and could be executed when the log file is viewed.

Fix:
To fix the vulnerability, any user input that is included in log messages should be properly sanitized or encoded to prevent malicious content from being executed. One common way to mitigate this vulnerability is to use HTML encoding or filtering to escape any HTML special characters in user input before logging it.