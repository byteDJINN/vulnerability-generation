using System;
using System.DirectoryServices;

class VirtualRealityWorld
{
    public void SearchUser(string username)
    {
        string filter = $"(&(objectClass=user)(displayName={username}))";
        DirectorySearcher searcher = new DirectorySearcher(filter);
        SearchResult result = searcher.FindOne();
        
        if (result != null)
        {
            Console.WriteLine("User found!");
        }
        else
        {
            Console.WriteLine("User not found.");
        }
    }
}

/*"""DELIMITER
```
|CODE|```

Explanation:
The code snippet provided is vulnerable to LDAP injection, a type of injection attack that occurs when untrusted data is inserted into an LDAP query without proper validation or sanitization. In this case, the `username` variable is directly concatenated into the LDAP filter string without any sanitization.

Exploitation:
An attacker could exploit this vulnerability by inputting malicious LDAP query syntax into the `username` parameter, which could manipulate the query to perform unintended actions, such as retrieving sensitive information or bypassing authentication mechanisms.

Fix:
To fix this vulnerability, input validation and sanitization should be performed on the `username` variable before constructing the LDAP query. One approach is to use parameterized queries or input validation functions to ensure that the input does not contain LDAP query syntax. Additionally, implementing proper error handling and logging can help detect and prevent LDAP injection attacks.