// Vulnerable code snippet
const childProcess = require('child_process');
let userInput = req.body.userInput;

childProcess.exec(`echo "${userInput}" > moments.txt`, (error, stdout, stderr) => {
    if (error) {
        console.error(`exec error: ${error}`);
        return;
    }
    console.log('Moment successfully submitted!');
});

/*"""DELIMITER
```
|CODE|```

Explanation:
The vulnerability in the code snippet is the OS Command Injection (CWE-78) that arises from directly interpolating user input into a shell command without proper sanitization. In this case, the user input provided through `req.body.userInput` is directly embedded into the `echo` command without any validation or sanitization.

Exploitation:
An attacker can exploit this vulnerability by injecting malicious shell commands within the `userInput` variable. For example, the attacker can enter a payload like `" ; rm -rf /"`, which will result in the following command being executed: `echo ""; rm -rf / > moments.txt`. This command will erase all files in the root directory of the server when executed.

Fix:
To prevent OS Command Injection vulnerabilities, user input should be validated, sanitized, and strictly controlled before being used in shell commands. One way to mitigate this vulnerability is by using parameterized queries or input validation functions to ensure that the user input contains only acceptable characters and does not include any special characters that might alter the intended behavior of the command. In this case, validating and restricting the `userInput` to alphanumeric characters and spaces could prevent OS Command Injection attacks.