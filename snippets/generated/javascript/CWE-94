const freelancerName = getRequestParameter('freelancerName');
const query = `SELECT * FROM proposals WHERE freelancerName='${freelancerName}'`;

function getRequestParameter(param) {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get(param);
}

/*"""DELIMITER
```
|CODE|```

Explanation:
The code snippet above is vulnerable to CWE-94 "Improper Control of Generation of Code ('Code Injection')". The vulnerability lies in the `query` variable where the `freelancerName` parameter from the URL query string is directly interpolated into a SQL query without proper sanitization or validation. An attacker could exploit this vulnerability by manipulating the `freelancerName` parameter in the URL to inject malicious SQL code, potentially leading to SQL injection attacks.

To fix this vulnerability, it is crucial to sanitize and validate all input data before using it in dynamic queries. One approach to mitigate SQL injection attacks is to use parameterized queries with prepared statements, which separates the SQL query logic from the user input data. This helps prevent the injection of malicious code into the query, making the application more secure.