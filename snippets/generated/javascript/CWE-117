const logger = require('winston');

function logUserActivity(userId, activity) {
  const sanitizedActivity = sanitizeInput(activity);
  logger.info(`User with ID ${userId} performed activity: ${sanitizedActivity}`);
}

function sanitizeInput(input) {
  return input.replace(/</g, "&lt;").replace(/>/g, "&gt;");
}

/*"""DELIMITER
```
|CODE|```

### Vulnerability Explanation:
The code snippet above contains the vulnerability CWE-117 "Improper Output Neutralization for Logs" due to the improper handling of user input in the logging process. The `sanitizeInput` function is used to escape HTML characters `<` and `>` to prevent potential Cross-Site Scripting (XSS) attacks in the log message. However, this function does not fully neutralize the input, making it possible for an attacker to inject malicious content.

### How It Could Be Exploited:
An attacker could exploit this vulnerability by injecting scripts into the `activity` parameter when calling the `logUserActivity` function. For example, by providing an input like `<script>alert('Vulnerable to XSS')</script>`, the attacker can execute a malicious script when the log message is displayed to users or administrators.

### How to Fix It:
To fix this vulnerability, it is important to properly escape and neutralize user input before logging it. One way to mitigate this issue is by using a library that provides secure encoding functions tailored for different contexts, such as the `escape-html` library for escaping HTML characters. Additionally, using parameterized logging methods provided by logging libraries can help prevent injection attacks. It is crucial to always validate, sanitize, and neutralize user input before displaying or logging it to avoid security vulnerabilities.