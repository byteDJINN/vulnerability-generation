const recipeId = window.location.hash.substring(1);
const recipeFile = `recipes/${recipeId}.json`;

fetch(recipeFile)
  .then(response => response.json())
  .then(data => {
    // Display recipe details on the website
  })
  .catch(error => {
    console.error('Error fetching recipe:', error);
  });

/*"""DELIMITER
```
|CODE|```

In the provided code snippet, the vulnerability occurs when the `recipeId` variable is directly used to construct the path to fetch a recipe file. By doing this, an attacker could manipulate the `recipeId` parameter in the URL to craft a malicious request to access arbitrary files on the server.

Exploiting this vulnerability, an attacker could change the `recipeId` parameter in the URL to navigate the server's filesystem and access sensitive files such as configuration files, user credentials, or other critical data.

To fix this vulnerability, it is recommended always to validate and sanitize user inputs, especially when constructing file paths. One approach to mitigate this vulnerability is to maintain a whitelist of allowed recipe IDs and compare the user-supplied ID against this list before constructing the file path. Additionally, limiting the access of the code to specific directories and ensuring proper access controls can also prevent this type of vulnerability.