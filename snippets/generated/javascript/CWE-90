const express = require('express');
const app = express();
const ldap = require('ldapjs');

app.get('/searchIsland', (req, res) => {
    const query = req.query.query;
    
    const ldapOpts = {
        filter: `(cn=${query})`,
        scope: 'sub',
    };
    
    const client = ldap.createClient({
        url: 'ldap://localhost:389'
    });

    client.search('ou=Islands,dc=example,dc=com', ldapOpts, (err, ldapRes) => {
        ldapRes.on('searchEntry', (entry) => {
            console.log('Found Island: ' + JSON.stringify(entry.object));
        });
    });
});

app.listen(3000, () => {
    console.log('Server is running on port 3000');
});

/*"""DELIMITER
```
|CODE|```
In the code snippet provided, there is an LDAP injection vulnerability present. This vulnerability arises from the fact that user input (in this case, the `query` parameter from the URL query string) is directly interpolated into an LDAP filter without proper validation or sanitization. 

An attacker could exploit this vulnerability by manipulating the `query` parameter to craft an LDAP query that retrieves sensitive information from the LDAP server beyond what the application intends to provide. For example, an attacker could modify the `query` parameter to end the original filter prematurely and inject additional LDAP query logic to access unauthorized data.

To fix this LDAP injection vulnerability, you should always use parameterized queries when interacting with a data source like LDAP. In this case, you should sanitize and validate the user input before constructing the LDAP filter. One approach is to use a module like `ldap-filter` to properly escape and construct LDAP filters based on user input. 

By implementing proper input validation and using parameterized queries, you can mitigate the risk of LDAP injection attacks and ensure the security of your application.