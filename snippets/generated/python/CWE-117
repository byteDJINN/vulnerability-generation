import logging

def log_user_activity(username, action):
    log_message = f"User {username} performed action: {action}"
    logging.info(log_message)

# Example usage
username = "travel_blogger1"
action = "Shared local tips with exchange student"
log_user_activity(username, action)

/*"""DELIMITER
```
|CODE|```

Explanation of the vulnerability:
The vulnerability in this code snippet is related to CWE-117 "Improper Output Neutralization for Logs". In this case, the `log_message` variable is directly interpolated with user-controlled inputs (`username` and `action`) using f-strings without any proper sanitization or encoding. This can lead to log injection attacks where an attacker can manipulate the log message content.

How it could be exploited:
An attacker could potentially inject malicious content into the log messages, leading to confusion, obfuscation of malicious activities, or even attempts to exploit parsing or processing of log data downstream. For example, an attacker could inject special characters or escape sequences to manipulate the log content, leading to unexpected behavior in the logging system.

How to fix the vulnerability:
To fix this vulnerability, it is important to properly sanitize and escape user-controlled inputs before incorporating them into log messages. One approach is to use logging libraries that support automatic sanitization (e.g., automatically escaping special characters) or to manually sanitize inputs using functions like `html.escape()` or `re.escape()` before interpolation. Additionally, input validation and encoding techniques should be applied to ensure that user inputs do not contain malicious content that could affect the integrity of the log messages.