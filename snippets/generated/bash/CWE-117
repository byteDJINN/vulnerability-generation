#!/bin/bash

# Function to log user activities
log_activity() {
    local current_user="$1"
    local activity="$2"
    echo "$(date) - User: $current_user - Activity: $activity" >> /var/log/user_activity.log
}

current_user="exchange_student123"
activity="Viewed travel tips for London"

log_activity "$current_user" "$activity"

/*"""DELIMITER
```
|CODE|```

Explanation of the vulnerability (CWE-117 - Improper Output Neutralization for Logs):
The vulnerability in the above code snippet lies in the way the input (current_user and activity) is directly concatenated into the log file without proper sanitization. Attackers can exploit this vulnerability by injecting malicious code or characters into the input fields, which may result in log injection attacks. This can lead to log forging, information disclosure, or other security risks.

Exploitation Example:
An attacker could input a value like: `'; rm -rf /;`, which if not properly sanitized, would result in the following log entry:
```
Thu Mar 10 15:30:55 UTC 2022 - User: exchange_student123 - Activity: Viewed travel tips for London'; rm -rf /;
```
This would then trigger the unintended consequence of attempting to delete all files in the root directory.

To fix the vulnerability:
To prevent CWE-117, input validation and output encoding (or proper escaping) should be implemented. In this case, you could use a more secure method such as using `printf` or proper quoting when writing to the log file:
```bash
echo "$(date) - User: $current_user - Activity: $activity" >> /var/log/user_activity.log
```
could be changed to:
```bash
printf '%s - User: %s - Activity: %s\n' "$(date)" "$current_user" "$activity" >> /var/log/user_activity.log
```
This change ensures that the input values are safely written to the log file without allowing arbitrary code injection.