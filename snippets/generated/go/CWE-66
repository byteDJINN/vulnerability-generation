package main

import (
	"fmt"
	"net/http"
	"os"
)

func main() {
	http.HandleFunc("/recipes/", func(w http.ResponseWriter, r *http.Request) {
		r.ParseForm()
		recipe := r.URL.Path[len("/recipes/"):]
		filepath := fmt.Sprintf("./recipes/%s.txt", recipe)

		content, err := os.ReadFile(filepath)
		if err != nil {
			w.WriteHeader(http.StatusNotFound)
			return
		}

		w.Write(content)
	})

	http.ListenAndServe(":8080", nil)
}

/*"""DELIMITER
```
|CODE|```

### Explanation:
The vulnerability in the code snippet is CWE-66 "Improper Handling of File Names that Identify Virtual Resources". This vulnerability arises from the fact that the code constructs a file path based on user input (`recipe` parameter from the URL) without proper validation and sanitization.

### Exploitation:
An attacker could exploit this vulnerability by manipulating the `recipe` parameter in the URL to include "../" sequences, which could potentially traverse out of the intended directory and access sensitive files on the server. For example, an attacker could craft a malicious request like `/recipes/../etc/passwd` to read the server's password file.

### Fix:
To fix this vulnerability, it is essential to properly sanitize and validate user input before using it to construct file paths. One way to mitigate this vulnerability is to ensure that the `recipe` parameter only includes allowed characters and does not allow directory traversal attempts. One common approach is to validate the input against a whitelist of allowed characters or patterns. Additionally, consider using a secure file server that enforces access control mechanisms to prevent unauthorized reads.