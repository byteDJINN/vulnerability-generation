package main

import (
    "fmt"
    "net/http"
    "os"
)

func handleImageRequest(w http.ResponseWriter, r *http.Request) {
    // Get the requested file path
    filePath := "images/" + r.URL.Query().Get("file")

    // Serve the requested file
    http.ServeFile(w, r, filePath)
}

func main() {
    http.HandleFunc("/image", handleImageRequest)
    http.ListenAndServe(":8080", nil)
}

/*"""DELIMITER
```
|CODE|```

Explanation:
This code snippet implements a simple HTTP server in Go that serves image files located in the "images" directory based on the "file" query parameter in the URL. The vulnerability lies in the construction of the `filePath` by concatenating the user-supplied input with a fixed directory path.

Exploitation:
An attacker could potentially exploit this vulnerability by manipulating the "file" query parameter to perform path traversal attacks. For example, by providing a crafted input like "../../../etc/passwd", the attacker could access sensitive system files outside the "images" directory.

Fix:
To fix this vulnerability, it is essential to properly sanitize and validate the user-supplied input before constructing the file path. One approach is to use a whitelist approach where the input is validated against a list of allowed characters or patterns to ensure that only legitimate file paths can be accessed. Additionally, consider using path.Join() function to safely construct file paths to prevent path traversal attacks.