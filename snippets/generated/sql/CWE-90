$query = "SELECT * FROM users WHERE username = '" . $_GET['username'] . "'";
$result = $pdo->query($query);
$user = $result->fetch(PDO::FETCH_ASSOC);

/*"""DELIMITER
```
|CODE|```

In this code snippet, the vulnerability lies in the way the user input ($_GET['username']) is directly concatenated into the SQL query without proper sanitization or validation. This makes it susceptible to LDAP injection.

Exploitation: An attacker can exploit this vulnerability by manipulating the $_GET['username'] parameter to inject malicious LDAP queries. For example, an attacker could input a username like `evilusername' AND 1=1;--` to bypass authentication or retrieve sensitive information.

Fix: To prevent LDAP injection, it is essential to use prepared statements with parameterized queries. By using prepared statements, the user input will be treated as data rather than part of the query structure, effectively neutralizing any malicious input entered by the user. Here's how the code could be fixed:

```
$stmt = $pdo->prepare("SELECT * FROM users WHERE username = :username");
$stmt->execute(['username' => $_GET['username']]);
$user = $stmt->fetch(PDO::FETCH_ASSOC);
```