// This code snippet fetches a list of must-see spots in a destination city from the database and logs the results for debugging purposes.

String city = request.getParameter("city");
String query = "SELECT spot_name FROM must_see_spots WHERE city = '" + city + "'";
ResultSet resultSet = statement.executeQuery(query);

while (resultSet.next()) {
    String spotName = resultSet.getString("spot_name");
    logger.info("Must-see spot in " + city + ": " + spotName);
}

/*"""DELIMITER
```
|CODE|```

Explanation of Vulnerability (CWE-117):
The vulnerability in this code snippet is the lack of proper output sanitization for the `city` parameter obtained from the user input. The value of the `city` parameter is directly concatenated into the SQL query string without any validation or sanitization, making it vulnerable to SQL injection attacks.

Exploitation:
An attacker could exploit this vulnerability by providing a malicious input for the `city` parameter that includes SQL injection payloads. For example, if the attacker enters `' OR 1=1--` as the city parameter value, the SQL query would become: `SELECT spot_name FROM must_see_spots WHERE city = '' OR 1=1--'`, which would always evaluate to true and return all must-see spots, potentially exposing sensitive information or causing other malicious activities.

Fix:
To prevent SQL injection attacks, it is crucial to use parameterized queries or prepared statements instead of directly concatenating user inputs into SQL queries. By using parameterized queries, input values are treated as data rather than executable code, making it impossible for attackers to inject malicious SQL code. Here's how the code could be fixed:

```java
String city = request.getParameter("city");
String query = "SELECT spot_name FROM must_see_spots WHERE city = ?";
PreparedStatement preparedStatement = connection.prepareStatement(query);
preparedStatement.setString(1, city);
ResultSet resultSet = preparedStatement.executeQuery();

while (resultSet.next()) {
    String spotName = resultSet.getString("spot_name");
    logger.info("Must-see spot in " + city + ": " + spotName);
}
```

In this fixed code snippet, a parameterized query is used to handle user input securely and prevent SQL injection vulnerabilities.