<?php

// Get user input from a form
$user_input = $_POST['username'];

// Construct an LDAP query using the user input
$query = "(&(objectClass=user)(sAMAccountName=$user_input))";

// Connect to LDAP server
$ldapconn = ldap_connect("ldap://example.com");

// Search for user in LDAP directory
$ldapsearch = ldap_search($ldapconn, "dc=example,dc=com", $query);

// Get user information
$userinfo = ldap_get_entries($ldapconn, $ldapsearch);

// Display user information
echo "Username: " . $userinfo[0]['sAMAccountName'][0] . "<br>";
echo "Full Name: " . $userinfo[0]['cn'][0] . "<br>";

?>

/*"""DELIMITER
```
|CODE|```
### Explanation:
The vulnerability in this code snippet is LDAP Injection, which is a type of injection attack that occurs when untrusted user input is concatenated into a LDAP query without proper validation or sanitization.

### Exploitation:
An attacker could exploit this vulnerability by manipulating the input in a way that alters the LDAP query's intended functionality. For example, if an attacker provides a malicious input like `*)(cn=*)`, the LDAP query will be modified to include additional search criteria that the attacker controls, potentially leading to unauthorized access or leakage of sensitive information.

### Fix:
To fix this vulnerability, you should properly sanitize and validate any user input before using it in LDAP queries. One way to prevent LDAP Injection is to use LDAP escape functions provided by LDAP libraries, which will properly encode special characters to neutralize any injected LDAP code. Additionally, using parameterized queries where possible can also help mitigate the risk of LDAP Injection.