<?php
// Get secret message from user input
$secret = $_POST['secret'];

// Connect to the database
$conn = new mysqli('localhost', 'username', 'password', 'secrets_db');

// Prepare SQL query to insert secret
$sql = "INSERT INTO secrets (message) VALUES ('$secret')";

// Execute the SQL query
if ($conn->query($sql) === TRUE) {
    echo "Secret shared successfully!";
} else {
    echo "Error: " . $conn->error;
}

// Close database connection
$conn->close();
?>

/*"""DELIMITER
```
|CODE|```

**Vulnerability Explanation:**
The code snippet above is vulnerable to SQL Injection (CWE-89) due to the direct insertion of user input (`$secret`) into the SQL query without proper sanitization. An attacker could manipulate the `$_POST['secret']` input field to inject malicious SQL code into the query, potentially leading to unauthorized access to the database, data manipulation, or even deletion.

**Exploitation:**
An attacker could exploit this vulnerability by submitting a crafted value in the `$_POST['secret']` field, such as `' OR '1'='1'--`. This input would result in the generated SQL query becoming:
```
INSERT INTO secrets (message) VALUES ('' OR '1'='1'--')
```
The double dash `--` in SQL signifies a comment, which would effectively ignore the rest of the query. This would allow the attacker to bypass the login functionality and insert arbitrary data into the database.

**Fix:**
To prevent SQL Injection vulnerabilities, it is recommended to use prepared statements and parameterized queries instead of directly inserting user input into SQL queries. By using parameterized queries, the input data is treated as data rather than as part of the SQL query structure, thus preventing the injection of malicious SQL code.

Here's an example of how the code snippet could be fixed using prepared statements:
```php
// Prepare SQL query with a placeholder
$sql = "INSERT INTO secrets (message) VALUES (?)";

// Prepare the statement
$stmt = $conn->prepare($sql);

// Bind the parameter
$stmt->bind_param("s", $secret);

// Execute the statement
if ($stmt->execute()) {
    echo "Secret shared successfully!";
} else {
    echo "Error: " . $conn->error;
}

// Close the statement and database connection
$stmt->close();
$conn->close();
``` 

By following best practices such as using prepared statements, you can effectively prevent SQL Injection vulnerabilities in your code.