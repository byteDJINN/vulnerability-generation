#include <iostream>
#include <fstream>

void downloadRecipe(std::string recipeName) {
    std::string filePath = "recipes/" + recipeName + ".txt";
    
    std::ifstream file(filePath);
    
    if (file.is_open()) {
        // Download and display recipe
    } else {
        std::cout << "Recipe not found." << std::endl;
    }
}

int main() {
    std::string userRecipe;
    std::cout << "Enter recipe name to download: ";
    std::cin >> userRecipe;

    downloadRecipe(userRecipe);

    return 0;
}

/*"""DELIMITER
```
|CODE|```

### Explanation:
The vulnerability in this code snippet is the improper handling of file names that identify virtual resources. In the `downloadRecipe` function, a file path is constructed by concatenating the user-provided `recipeName` with a fixed directory path. This can be exploited by an attacker to traverse directories and access sensitive files on the server.

For example, if an attacker provides `../../etc/passwd` as the `recipeName`, the resulting `filePath` will be `"recipes/../../etc/passwd.txt"`, allowing the attacker to potentially read the password file.

### How it could be exploited:
An attacker could exploit this vulnerability by providing a crafted input that contains directory traversal sequences to access and retrieve any file on the server to which the application has read access. This could lead to unauthorized access to sensitive data, including configuration files, user credentials, and more.

### How it could be fixed:
To fix this vulnerability, it is important to sanitize and validate user input properly. One approach is to restrict the input to alphanumeric characters only and reject any input containing special characters like "/", "..", or "../../../../". Additionally, consider using a whitelist approach where you explicitly define the allowed file names or store recipes in a database rather than directly accessing files based on user input. Always validate and sanitize user input before constructing file paths to prevent directory traversal attacks.