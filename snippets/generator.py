import random
import re

import os
from dotenv import load_dotenv
load_dotenv()

from openai import OpenAI
client = OpenAI(
    api_key = os.getenv("OPENAI_API_KEY")
)

directory = "generated"

def generate(technology):
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {
                "role": "system",
                "content": """
                    You are a developer who writes code snippets and accidentally left in the specified vulnerability. 
                """,
            },
            {
            "role": "user",
            "content": f"""
                Write a code snippet for the following website using {technology} that contains the vulnerability {vulnerabilityName} {vulnerabilityDesc}.
                The code snippet should be enclosed in triple backticks. After the code snippet, write an explanation of how the vulnerability works, how it could be exploited, and how it could be fixed. 
                \n
            """ + websiteIdea
            }
        ],
        temperature=1,
        stop=[],
        )
    codeSnippet =  re.search(r"```.*?\n(.*?)```", response.choices[0].message.content, re.DOTALL).group(1)
    codeExplanation = response.choices[0].message.content.replace(codeSnippet, "|CODE|")

    _directory = f"{directory}/{technology.lower()}"
    if not os.path.exists(_directory):
        os.makedirs(_directory)
    with open(f"{_directory}/{vulnerabilityName}", "w") as file:
        file.write(codeSnippet)
        file.write("\n/*\"\"\"DELIMITER\n")
        file.write(codeExplanation)


technologies = ["JavaScript", "HTML", "Python", "SQL", "TypeScript", "Bash", "Java", "C#", "C++", "C", "PHP", "PowerShell", "Go", "Rust", "Kotlin", "Ruby", "Lua", "Dart", "Assembly", "Swift", "R", "Visual Basic (.Net)", "MATLAB", "VBA", "Groovy", "Delphi", "Scala", "Perl", "Elixir", "Objective-C", "Haskell", "GDScript", "Lisp", "Solidity", "Clojure", "Julia", "Erlang", "F#", "Fortran", "Prolog", "Zig", "Ada", "OCaml", "Apex", "Cobol", "SAS", "Crystal", "Nim", "APL", "Flow", "Raku"]

vulnerabilityName = "CWE-22"
vulnerabilityDesc = "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"

response = client.chat.completions.create(
    model="gpt-3.5-turbo",
    messages=[
        {
        "role": "user",
        "content": f"""
            Given a list of technologies, output each technology on a line followed by a space and a 1 or 0 indicating if the vulnerability {vulnerabilityName} {vulnerabilityDesc} could exist inside an application that uses the given language. 
            After each technology, write a one sentence explanation of why you made that decision on the following line. 
            Do not make overarching statements regarding all languages. Make an individual decision per language. 
            Always be on the safe side, even if the vulnerability is unlikely, if it is possible, mark it as 1. 
            The only exception is if the language is not capable of the vulnerability, then mark it as 0.
            {chr(10).join(technologies)}
        """,
        }
    ],
    temperature=0,
    stop=[],
    )
response = response.choices[0].message.content

with open(f"{directory}/validTechnologies", "w") as file:
    file.write(response)

validTechnologies = []
for t in technologies:
    if re.search(f"{re.escape(t)} 1", response):
        validTechnologies.append(t)

response = client.chat.completions.create(
    model="gpt-3.5-turbo",
    messages=[
        {
        "role": "user",
        "content": "Give me a random idea for a website in one sentence",
        }
    ],
    temperature=1.7,
    stop=[],
    )
websiteIdea = response.choices[0].message.content

with open(f"{directory}/websiteIdea", "w") as file:
    file.write(websiteIdea)

for t in validTechnologies:
    generate(t)


# TODO: prompt to ask what is the vulnerability in this code snippet - if they match explanations its valid otherwise its invalid

