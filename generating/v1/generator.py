import os
import random
import re
import json
from dotenv import load_dotenv

from openai import OpenAI

load_dotenv()


class VulnerabilityGenerator421:
    def __init__(self, apiKey, directory="generated"):
        self.client = OpenAI(api_key=apiKey)
        self.directory = directory
        self.totalTokens = 0

    def generateCodeSnippet(self, vulnerabilityName, vulnerabilityDesc):
        response = self.client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": "You are a developer who writes code snippets and accidentally left in the specified vulnerability.",
                },
                {
                    "role": "user",
                    "content": f"""
                        Write a C code function that contains the vulnerability {vulnerabilityName} {vulnerabilityDesc}.
                        The code snippet should be enclosed in triple backticks. Do not write anything else other than the code snippet.
                        The code should be realistic, it should not be obvious there is a vulnerability. It should look like real code found on a real github repository for an actual live website. 
                    """ 
                }
            ],
            temperature=1,
            stop=[],
        )
        codeSnippet = re.search(r"```.*?\n(.*?)```", response.choices[0].message.content, re.DOTALL)
        if codeSnippet is None:
            print("No code snippet found")
            return
        codeSnippet = codeSnippet.group(1)

        self.totalTokens += response.usage.total_tokens

        _directory = f"{self.directory}"
        os.makedirs(_directory, exist_ok=True)
        # if file already exists, increment name
        i = 1
        while os.path.exists(f"{_directory}/{vulnerabilityName}-{i}"):
            i += 1
        with open(f"{_directory}/{vulnerabilityName}-{i}", "w") as file:
            file.write(codeSnippet)
    
    def calculateTotalCost(self):
        # Assuming price upper limit
        pricePerToken = 15 / 1000000
        totalCost = self.totalTokens * pricePerToken
        return totalCost


if __name__ == "__main__":
    load_dotenv()
    apiKey = os.getenv("OPENAI_API_KEY")
    generator = VulnerabilityGenerator421(apiKey)

    data = {}
    with open("../../input/diversevul_2.json", "r") as file:
        data = json.load(file)

    cwes = {}
    with open("../../input/2000.csv", "r", encoding="utf-8") as file:
        cwes = {f"CWE-{line.split(',')[0]}": line.split(",")[1] for line in file.readlines()}

    for commitID in list(data.keys())[::len(data) // 8]: # todo fix this since we no longer use vuln instead target
        cweList = data[commitID]["cwe"]
        for cwe in cweList:
            desc = cwes[cwe]
            generator.generateCodeSnippet(cwe, desc)
            totalCost = generator.calculateTotalCost()
            print(f"Total cost: ${totalCost:.4f}")