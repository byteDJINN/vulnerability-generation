#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>

#define BUFFER_SIZE 1024

void send_credentials(const char *server_ip, int port, const char *username, const char *password) {
    int sockfd;
    struct sockaddr_in server_addr;
    char buffer[BUFFER_SIZE];

    // Creating socket
    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("Socket creation error");
        return;
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(port);

    // Convert IPv4 and IPv6 addresses from text to binary form
    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {
        perror("Invalid address/ Address not supported");
        close(sockfd);
        return;
    }

    // Connect to server
    if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Connection Failed");
        close(sockfd);
        return;
    }

    // Prepare the credentials message
    snprintf(buffer, BUFFER_SIZE, "username=%s&password=%s", username, password);

    // Send the credentials to the server
    if (send(sockfd, buffer, strlen(buffer), 0) < 0) {
        perror("Send failed");
    } else {
        printf("Credentials sent successfully\n");
    }

    // Close the socket
    close(sockfd);
}

int main() {
    const char *server_ip = "192.168.1.100";
    int port = 8080;

    const char *username = "admin";
    const char *password = "password123";

    send_credentials(server_ip, port, username, password);

    return 0;
}
