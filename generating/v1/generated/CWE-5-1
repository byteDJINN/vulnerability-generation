#include <iostream>
#include <string>
#include <boost/asio.hpp>

void sendUserData(const std::string& server, const std::string& port, const std::string& user_data) {
    boost::asio::io_context io_context;

    // Creating a socket
    boost::asio::ip::tcp::resolver resolver(io_context);
    boost::asio::ip::tcp::resolver::results_type endpoints = resolver.resolve(server, port);
    boost::asio::ip::tcp::socket socket(io_context);
    boost::asio::connect(socket, endpoints);

    // Preparing the request
    std::string request = "POST /submit-user-data HTTP/1.1\r\n";
    request += "Host: " + server + "\r\n";
    request += "Content-Length: " + std::to_string(user_data.size()) + "\r\n";
    request += "Content-Type: application/x-www-form-urlencoded\r\n\r\n";
    request += user_data;

    // Sending the data
    boost::asio::write(socket, boost::asio::buffer(request));

    // Reading the response
    char response[512];
    boost::system::error_code error;
    size_t len = socket.read_some(boost::asio::buffer(response), error);
    if (error == boost::asio::error::eof)
        return; // Connection closed cleanly by peer.
    else if (error)
        throw boost::system::system_error(error); // Some other error.

    std::cout.write(response, len);
}

int main() {
    std::string server = "example.com";
    std::string port = "80";
    std::string user_data = "username=testuser&password=testpass";

    sendUserData(server, port, user_data);

    return 0;
}
