import { Mutex } from 'async-mutex';

class VirtualTattooParlor {
    private static instance: VirtualTattooParlor;
    private lock = new Mutex();
    private tattoosInUse: Map<string, boolean> = new Map();

    private constructor() {}

    public static getInstance(): VirtualTattooParlor {
        if (!VirtualTattooParlor.instance) {
            VirtualTattooParlor.instance = new VirtualTattooParlor();
        }
        return VirtualTattooParlor.instance;
    }

    public async tryOnTattoo(userId: string, tattooId: string): Promise<void> {
        // Locking mechanism to manage tattoo design resource usage
        await this.lock.acquire();
        try {
            if (this.tattoosInUse.get(tattooId)) {
                console.log(`Tattoo ${tattooId} is currently in use.`);
                return;
            }

            console.log(`User ${userId} is trying on tattoo ${tattooId}.`);
            // Simulate the user trying on the tattoo
            this.tattoosInUse.set(tattooId, true);

            // Imagine there's a delay here for the try-on process
            setTimeout(() => {
                this.tattoosInUse.set(tattooId, false);
            }, 1000);
        } finally {
            // This line is intended to release the lock, but it's mistakenly placed inside the finally block
            // without ensuring that the resource manipulation is complete, leading to improper resource locking.
            this.lock.release();
        }
    }
}

/*"""DELIMITER
A virtual tattoo parlor where users can "try on" different tattoo designs on themselves using augmented reality technology.