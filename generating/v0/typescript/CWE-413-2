import express from 'express';
import { Destination } from './models/destination';
import fs from 'fs';
import lockFile from 'lockfile';

const app = express();
app.use(express.json());

const PORT = 3000;
const destinationsDataPath = './data/destinations.json';
const lockFilePath = './data/destinations.lock';

app.post('/suggest-destination', (req, res) => {
    const userPreferences = req.body;

    // Attempt to lock the destinations data file
    lockFile.lock(lockFilePath, {wait: 1000}, (err) => {
        if (err) {
            console.error("Error acquiring lock:", err);
            return res.status(500).send('Error processing your request. Please try again later.');
        }

        try {
            // Read current destinations
            const data = fs.readFileSync(destinationsDataPath, 'utf8');
            const destinations: Destination[] = JSON.parse(data);

            // Filter destinations based on user preferences
            const suggestedDestinations = destinations.filter(destination => 
                destination.tags.some(tag => userPreferences.includes(tag))
            );

            res.json(suggestedDestinations);
        } catch (error) {
            console.error("Error reading destinations data:", error);
            res.status(500).send('Error processing your request. Please try again later.');
        } finally {
            // Always attempt to remove the lock, even after failed read attempt
            lockFile.unlock(lockFilePath, (err) => {
                if (err) {
                    console.error("Error releasing lock:", err);
                }
            });
        }
    });
});

app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});

/*"""DELIMITER
An interactive travel itinerary planning tool that suggests off-the-beaten-path destinations based on user preferences.