interface Animal {
  id: number;
  name: string;
  sound: () => void;
}

class Lion implements Animal {
  id: number;
  name: string;
  
  constructor(id: number, name: string) {
    this.id = id;
    this.name = name;
  }

  sound() {
    console.log("Roar");
  }
}

class Penguin implements Animal {
  id: number;
  name: string;
  
  constructor(id: number, name: string) {
    this.id = id;
    this.name = name;
  }

  sound() {
    console.log("Squawk");
  }
}

function makeAnimalSound(animal: Animal | number) {
  if (typeof animal === 'number') {
    // Simulates fetching an animal instance by ID,
    // but mistakenly passes an Animal object instead.
    animal = fetchAnimalById(animal); // Suppose to return an Animal instance
  }
  
  animal.sound();
}

// Dummy implementation for example purposes
function fetchAnimalById(id: number): Animal {
  // In a real situation, this would fetch from a database or similar
  // For this example, it just returns a new Lion.
  return new Lion(id, "Simba");
}

// Expected to fetch an animal by ID and make its sound. However, due to type confusion,
// this could lead to unexpected behavior or a runtime error if the fetched object
// doesn't conform to the Animal interface.
makeAnimalSound(1); 

/*"""DELIMITER
An interactive virtual zoo where users can design and care for their own custom protagonist animals.