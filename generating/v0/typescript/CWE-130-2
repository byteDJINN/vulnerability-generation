import { Request, Response } from "express";
import { Product } from "../models/Product";

// Endpoint to update product quantity in inventory
export const updateProductQuantity = async (req: Request, res: Response) => {
  try {
    const productId = req.body.productId;
    const newQuantity = req.body.newQuantity;

    if (!productId || newQuantity === undefined) {
      return res.status(400).send("Missing productId or newQuantity in request.");
    }

    // Find the product based on productId
    const product = await Product.findById(productId);

    if (!product) {
      return res.status(404).send("Product not found.");
    }

    // Update the product quantity
    const updatedBytes = Buffer.from(newQuantity.toString());
    
    // Here is where the inconsistency happens. Assuming the newQuantity is supposed to update
    // a certain field within a product object that expects a certain length of data,
    // but we directly pass the Buffer without validating its length
    product.quantity = updatedBytes.readInt8(0, true);

    await product.save();
    res.status(200).send("Product quantity updated successfully.");
  } catch (error) {
    console.error("Error updating product quantity: ", error);
    res.status(500).send("Internal server error.");
  }
};

/*"""DELIMITER
A website that connects consumers with locally grown and harvested food to support sustainable agricultural practices@GeneratedValue.