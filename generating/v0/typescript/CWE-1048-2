class SoapService {
    static instance: SoapService;
    private subscribers: any[] = [];

    constructor() {
        if (SoapService.instance) {
            return SoapService.instance;
        }
        SoapService.instance = this;
    }

    subscribe(callback: Function) {
        this.subscribers.push(callback);
    }

    notifySubscribers(soapDetails: any) {
        this.subscribers.forEach(subscriber => {
            subscriber(soapDetails);
        });
    }

    createPersonalizedSoap(customerId: number, preferences: { scent: string, ingredients: string[] }) {
        const soapDetails = { customerId, ...preferences };
        // Logic to create soap based on preferences

        // Notifying all subscribers about the new soap
        this.notifySubscribers(soapDetails);
    }
}

// Usage on website
const soapService = new SoapService();

// A lot of different parts of the website can subscribe to soap creation
// Assuming these are various components or services that need to react when a new soap is created
for (let i = 0; i < 1000; i++) {
    soapService.subscribe((soapDetails: any) => {
        console.log(`New soap created: ${soapDetails}`);
        // Potentially lots of logic here responding to the new soap
    });
}

// A function elsewhere that triggers soap creation
function orderCustomSoap(customerId: number, scent: string, ingredients: string[]) {
    soapService.createPersonalizedSoap(customerId, { scent, ingredients });
}

/*"""DELIMITER
A platform for users to rent personalized soaps based on their favorite scents and ingredients.