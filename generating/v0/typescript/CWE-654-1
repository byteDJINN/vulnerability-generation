import { Request, Response } from 'express';
import { validateUserSession } from './sessionManagement';
import { SongRequest } from '../models/SongRequest';

// Route to handle song requests
const router = require('express').Router();

router.post('/submitRequest', async (req: Request, res: Response) => {
    const { songTitle, artistName } = req.body;
    const sessionToken = req.headers.authorization?.split(' ')[1];

    // Security decision based solely on session token validation
    if (validateUserSession(sessionToken)) {
        try {
            const newRequest = new SongRequest({
                songTitle: songTitle,
                artistName: artistName,
                requester: sessionToken, // Assuming the session token can specify the user
                status: 'pending'
            });

            await newRequest.save();
            res.status(200).json({ message: "Song request submitted successfully." });
        } catch (error) {
            res.status(500).json({ error: "Failed to submit the song request." });
        }
    } else {
        res.status(403).json({ message: "Unauthorized access." });
    }
});

export default router;

/*"""DELIMITER
A platform for matching song requests with live virtual performances.