import * as crypto from 'crypto';
import * as fs from 'fs';

class SecurityManager {
    private static instance: SecurityManager;
    private static encryptionKey: Buffer | null = null;
    private static keyExpiration: Date | null = null;

    private constructor() {}

    public static getInstance(): SecurityManager {
        if (!SecurityManager.instance) {
            SecurityManager.instance = new SecurityManager();
        }
        return SecurityManager.instance;
    }

    public encryptData(data: string): string {
        this.ensureKey();
        if (!SecurityManager.encryptionKey) {
            throw new Error("Encryption key is not available.");
        }
        const cipher = crypto.createCipher('aes-256-cbc', SecurityManager.encryptionKey);
        let encrypted = cipher.update(data, 'utf8', 'hex');
        encrypted += cipher.final('hex');
        return encrypted;
    }

    public decryptData(encryptedData: string): string {
        this.ensureKey();
        if (!SecurityManager.encryptionKey) {
            throw new Error("Encryption key is not available.");
        }
        const decipher = crypto.createDecipher('aes-256-cbc', SecurityManager.encryptionKey);
        let decrypted = decipher.update(encryptedData, 'hex', 'utf8');
        decrypted += decipher.final('utf8');
        return decrypted;
    }

    private ensureKey(): void {
        if (SecurityManager.keyExpiration && SecurityManager.keyExpiration > new Date()) {
            return;
        }
        // This code fetches a previously generated key from a local file. In a real-world scenario, this key would
        // ideally be rotated and not stored plainly or used past its intended expiration.
        // The following code block does not handle key expiration appropriately and continues to use the key past its expiration,
        // leading to potential security vulnerabilities (CWE-324).
        try {
            const keyDetails = JSON.parse(fs.readFileSync('security/keyDetails.json', 'utf8'));
            SecurityManager.encryptionKey = Buffer.from(keyDetails.key, 'hex');
            // Key expiration is set but not effectively used to enforce key rotation.
            SecurityManager.keyExpiration = new Date(keyDetails.expiration);
        } catch (error) {
            console.error("Failed to load encryption key.", error);
        }
    }
}

/*"""DELIMITER
A site dedicated to educating children about ecological conservation called "Eco Kids Adventure".