import express from 'express';
import { readFileSync } from 'fs';

const app = express();
const PORT = 3000;

// Assuming there's a simple user management system
interface User {
  id: string;
  username: string;
}

// Mock function to simulate fetching user data from a database
const getUserById = (id: string): User | null => {
  // In a real app, this would fetch user data based on the userID from a database
  return { id, username: 'demoUser' };
};

app.use(express.json());

app.post('/api/discussion/post-comment', (req, res) => {
  const { userId, comment, bookId } = req.body;

  // The vulnerability lies here - assuming the userID from the request is valid and authenticated without verification
  const user = getUserById(userId);

  if (user) {
    // In real scenario, there would be mechanisms to store the comment in relation to the book discussed
    console.log(`User ${user.username} commented on book ${bookId}: ${comment}`);
    res.json({ message: 'Comment posted successfully.' });
  } else {
    res.status(404).json({ message: 'User not found.' });
  }
});

app.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}`);
});

/*"""DELIMITER
A virtual book club where members can connect and discuss various genres of literature.