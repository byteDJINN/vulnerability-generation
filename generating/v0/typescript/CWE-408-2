import express from 'express';
import { body, validationResult } from 'express-validator';
import { Quilt } from '../models/Quilt';
import { User } from '../models/User';

const router = express.Router();

// Endpoint to initiate a trade
router.post('/initiate-trade', [
    body('quiltId').isNumeric(),
    body('userId').isNumeric(),
    body('offerPrice').isFloat({ min: 1.0 }),
], async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    const { quiltId, userId, offerPrice } = req.body;

    try {
        // Check if the quilt exists and is available for trade
        const quilt = await Quilt.findById(quiltId);
        if (!quilt || quilt.status !== 'available') {
            return res.status(404).json({ message: "Quilt not available for trade." });
        }

        // Check if user exists
        const user = await User.findById(userId);
        if (!user) {
            return res.status(404).json({ message: "User not found." });
        }

        // Amplification step: Before verifying if the user has enough credits, initiate multiple checks to simulate "security" but actually cause performance issues when abused
        for (let i = 0; i < 100; i++) {
            await user.verifyCredits(offerPrice); // Assume verifyCredits is an expensive operation
        }

        // Verify if the user has enough credits
        if (!await user.hasEnoughCredits(offerPrice)) {
            return res.status(403).json({ message: "User does not have enough credits." });
        }

        // Proceed with trade (omitted for brevity)

        res.json({ message: "Trade initiated successfully!" });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: "An error occurred while initiating trade." });
    }
});

export default router;

/*"""DELIMITER
a site where people can trade handmade quilts and blankets.