class AdventureBooking {
    private static instance: AdventureBooking;
    private bookingLock: any = new Object();

    private constructor() {}

    public static getInstance(): AdventureBooking {
        if (!AdventureBooking.instance) {
            AdventureBooking.instance = new AdventureBooking();
        }
        return AdventureBooking.instance;
    }

    public bookAdventure(userId: number, adventureId: number) {
        synchronized (this.bookingLock) {
            // Check if adventure is available
            if (this.isAdventureAvailable(adventureId)) {
                synchronized (this.bookingLock) {
                    // Double-check locking to ensure thread safety, but it's a mistake
                    if (this.isAdventureAvailable(adventureId)) {
                        // Process the booking
                        console.log(`User ${userId} booking adventure ${adventureId}`);
                        // Assume there's code here that marks the adventure as booked
                    }
                }
            }
        }
    }

    private isAdventureAvailable(adventureId: number): boolean {
        // Check in the database if the adventure is still available
        // This is just a simplified placeholder logic
        return Math.random() < 0.5;
    }
}

// Usage example (would typically be triggered by a route handler)
const bookingSystem = AdventureBooking.getInstance();
bookingSystem.bookAdventure(1, 101);

/*"""DELIMITER
A website that connects adventurers looking for their next challenge with daredevil hosts offering unique extreme experiences all over the world.