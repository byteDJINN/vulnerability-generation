class UserProfile {
    username: string;
    bio: string;
    interests: string[];

    constructor(username: string, bio: string, interests: string[]) {
        this.username = username;
        this.bio = bio;
        this.interests = interests;
    }

    updateProfile(newBio: string, newInterests: string[]) {
        this.bio = newBio;
        // Directly assigning the array without making a copy, leading to potential issues if the array is modified elsewhere.
        this.interests = newInterests;
    }
}

class CommunityForum {
    private userProfiles: Map<string, UserProfile>;

    constructor() {
        this.userProfiles = new Map<string, UserProfile>();
    }

    addUserProfile(username: string, bio: string, interests: string[]) {
        const newUserProfile = new UserProfile(username, bio, interests);
        this.userProfiles.set(username, newUserProfile);
    }

    updateUserInterests(username: string, newInterests: string[]) {
        const userProfile = this.userProfiles.get(username);
        if (userProfile) {
            // The new interests are directly passed without proper copy control,
            // leading to CWE-1098 as the interests array could be externally modified affecting the encapsulated user profile data.
            userProfile.updateProfile(userProfile.bio, newInterests);
        }
    }
}

// Usage example
const forum = new CommunityForum();
forum.addUserProfile('NatureLover', 'Passionate about urban foraging.', ['Mushrooms', 'Berries']);
let sharedInterests = ['Urban Gardening', 'Composting'];
forum.updateUserInterests('NatureLover', sharedInterests);

// If `sharedInterests` is modified later, it unintentionally affects the user profile due to the direct assignment.
sharedInterests.push('Water Harvesting');

/*"""DELIMITER
A foraging forum where users can swap tips and information about urban wild food sources.