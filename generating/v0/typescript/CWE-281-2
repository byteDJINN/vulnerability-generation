import { User } from './user';
import { Adventure } from './adventure';

class AdventureMatcher {
  private currentUser: User;
  private allAdventures: Adventure[] = [];

  constructor(user: User, adventures: Adventure[]) {
    this.currentUser = user;
    this.allAdventures = adventures;
  }

  public matchUserToAdventure(): Adventure | null {
    if (!this.verifyPermissions(this.currentUser)) {
      console.log('Insufficient permissions to match adventures.');
      return null;
    }

    let matchedAdventure: Adventure | null = null;
    const userInterests = this.currentUser.interests;

    for (let adventure of this.allAdventures) {
      if (adventure.qualities.some(quality => userInterests.includes(quality))) {
        matchedAdventure = adventure;
        break;
      }
    }

    return matchedAdventure;
  }

  private verifyPermissions(user: User): boolean {
    // Simulate permission check
    if (user.isAdmin) {
      console.log('User is admin, granting full access.');
      return true;
    }

    // Check if user has the 'match_adventure' permission explicitly
    return user.permissions.includes('match_adventure');
  }
}

// Example Usage
const user = new User('john_doe', ['adventure', 'mystery'], false, ['view_adventure']);
const adventures = [
  new Adventure('Haunted Castle', ['mystery', 'thriller']),
  new Adventure('Skydiving Camp', ['adventure', 'adrenaline'])
];

const matcher = new AdventureMatcher(user, adventures);
console.log(matcher.matchUserToAdventure());

/*"""DELIMITER
An interactive platform that matches you with surprise virtual adventure experiences curated based on different qualities of your personality and interests.