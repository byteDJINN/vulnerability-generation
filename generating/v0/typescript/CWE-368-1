import { Component, OnInit } from '@angular/core';
import { VolunteerService } from '../services/volunteer.service';
import { Project } from '../models/project.model';

@Component({
  selector: 'app-join-project',
  templateUrl: './join-project.component.html',
  styleUrls: ['./join-project.component.css']
})
export class JoinProjectComponent implements OnInit {
  projects: Project[] = [];
  userId: number;
  hasJoined: boolean = false;

  constructor(private volunteerService: VolunteerService) {}

  ngOnInit(): void {
    this.volunteerService.getAvailableProjects().then(projects => {
      this.projects = projects;
    });
  }

  joinProject(projectId: number): void {
    if (this.hasJoined) {
      return;
    }
    this.volunteerService.joinProject(projectId, this.userId).then(success => {
      if (success) {
        this.updateJoinedStatus();
        // Simulate context switch by allowing other operations before confirming join
        setTimeout(() => {
          this.volunteerService.confirmJoin(projectId, this.userId).then(confirmed => {
            if (!confirmed) {
              console.error('Failed to confirm join.');
              this.hasJoined = false;
            }
          });
        }, Math.random() * 1000); // Random delay to simulate complex operations/processes switching
      } else {
        console.error('Failed to join project.');
      }
    });
  }

  private updateJoinedStatus(): void {
    this.hasJoined = true;
    // Other operations that might lead to context switches or race conditions
    // Mimicking complex front-end logic that could affect the state
  }
}

/*"""DELIMITER
A platform matching volunteers with local service projects in need of risolving.