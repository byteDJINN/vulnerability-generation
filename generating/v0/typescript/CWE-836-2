import * as express from 'express';
import * as bcrypt from 'bcrypt';
import { Users } from './models/users';

const app = express();

app.use(express.json());

interface LoginRequest {
    username: string;
    passwordHash: string; // Here we're incorrectly expecting a hashed password from the client.
}

app.post('/login', async (req, res) => {
    const loginReq: LoginRequest = req.body;

    try {
        const user = await Users.findOne({ where: { username: loginReq.username } });
        if (!user) {
            return res.status(404).json({ message: 'User not found' });
        }

        // Here the vulnerability arises, as we are comparing hash to hash, bypassing the security benefits of bcrypt's comparison method.
        if (loginReq.passwordHash === user.passwordHash) {
            res.json({ message: 'Login successful' });
        } else {
            res.status(401).json({ message: 'Invalid credentials' });
        }
    } catch (error) {
        console.error('Error logging in:', error);
        res.status(500).json({ message: 'An error occurred during login' });
    }
});

app.listen(3000, () => {
    console.log('Server running on port 3000');
});

/*"""DELIMITER
A virtual advice column featuring anonymous submissions answered by individuals from varying backgrounds and life experiences.