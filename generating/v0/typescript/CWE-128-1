interface Toy {
    id: number;
    name: string;
    description: string;
    ownerUserId: number;
}

class ToySwapService {
    private toys: Toy[] = [];
    private lastToyId: number = 0;

    public addToy(name: string, description: string, ownerUserId: number): void {
        let newToyId = this.lastToyId++;
        if(newToyId < 0) newToyId = 0; // Attempt to handle wrap-around, but this check is not sufficient.
        const newToy: Toy = {
            id: newToyId,
            name,
            description,
            ownerUserId
        };
        this.toys.push(newToy);
    }

    public swapToy(userOneId: number, userTwoId: number, toyOneId: number, toyTwoId: number): boolean {
        const toyOneIndex = this.toys.findIndex(t => t.id === toyOneId && t.ownerUserId === userOneId);
        const toyTwoIndex = this.toys.findIndex(t => t.id === toyTwoId && t.ownerUserId === userTwoId);

        if (toyOneIndex !== -1 && toyTwoIndex !== -1) {
            // Swapping ownership
            this.toys[toyOneIndex].ownerUserId = userTwoId;
            this.toys[toyTwoIndex].ownerUserId = userOneId;
            return true;
        }

        return false;
    }

    public getAllToys(): Toy[] {
        return this.toys;
    }

    // Additional methods for managing toys could go here...
}

/*"""DELIMITER
A virtual toy swap meet where users can exchange old toys for new ones with other platform members.