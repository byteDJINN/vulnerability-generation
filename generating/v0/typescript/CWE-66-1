import * as fs from 'fs';
import * as path from 'path';
import express from 'express';

const app = express();
const PORT = 3000;

app.use(express.json());

app.post('/create-world', (req, res) => {
    const worldName = req.body.worldName;
    const worldContent = req.body.worldContent;

    if (!worldName || !worldContent) {
        return res.status(400).send('Invalid world data provided.');
    }

    const worldFilePath = path.join(__dirname, 'virtualWorlds', worldName + '.json');

    fs.writeFile(worldFilePath, JSON.stringify(worldContent), (err) => {
        if (err) {
            console.error('Error saving the world:', err);
            return res.status(500).send('Could not save the world.');
        }
        res.status(201).send('World created successfully.');
    });
});

app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});

/*"""DELIMITER
A virtual library allowing members to create their own interactive fantasy worlds within the digital realm.
```typescript
|CODE|
```

### Vulnerability Explanation
The vulnerability in this code is related to CWE-66: Improper Handling of File Names that Identify Virtual Resources. This security issue arises because the code does not properly validate or sanitize the `worldName` input before using it to construct a file path. This can lead to a situation where a malicious user could manipulate `worldName` to include path traversal sequences (e.g., `../../`) in order to access, modify, or create files outside of the intended directory (`virtualWorlds`).

### How It Could Be Exploited
An attacker could exploit this vulnerability by sending a specially crafted POST request to the `/create-world` endpoint with a `worldName` that includes path traversal characters. For example, using a `worldName` like `../../etc/passwd` would allow the attacker to attempt to write their `worldContent` payload outside of the `virtualWorlds` directory, potentially overwriting system files or placing files in unauthorized locations, which could lead to information disclosure, denial of service, or code execution.

### How It Could Be Fixed
To fix this vulnerability, the application should implement proper input validation and sanitization for the `worldName`. Specifically, it should:

- Restrict the characters allowed in `worldName` (e.g., only alphanumeric characters and specific punctuation).
- Explicitly check for and reject input containing path traversal patterns or other unexpected characters.
- Consider using a secure library or function to safely handle file paths and names.

Here's a simple validation approach that could be added before using `worldName`:

```typescript
// Simple validation to mitigate path traversal - can be expanded as needed
if (!/^[a-zA-Z0-9-_ ]+$/.test(worldName)) {
    return res.status(400).send('Invalid world name provided.');
}
```
This regex check ensures `worldName` consists only of alphanumeric characters, dashes, underscores, and spaces, effectively mitigating the risk of path traversal attacks. However, depending on the application's requirements, further sanitization and checks might be necessary.