import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Letter } from './entities/letter.entity';
import { User } from './entities/user.entity';

@Injectable()
export class LetterService {
  constructor(
    @InjectRepository(Letter)
    private readonly letterRepository: Repository<Letter>,
    @InjectRepository(User)
    private readonly userRepository: Repository<User>,
  ) {}

  async createLetter(userId: string, letterContent: string): Promise<Letter> {
    const user = await this.userRepository.findOne(userId);
    const newLetter = this.letterRepository.create({
      content: letterContent,
      owner: user, // The letter ownership is assigned to the user who created it.
    });
    await this.letterRepository.save(newLetter);
    return newLetter;
  }

  async exchangeLetters(user1Id: string, user2Id: string, letter1Id: string, letter2Id: string): Promise<void> {
    const user1 = await this.userRepository.findOne(user1Id);
    const user2 = await this.userRepository.findOne(user2Id);
    const letter1 = await this.letterRepository.findOne(letter1Id);
    const letter2 = await this.letterRepository.findOne(letter2Id);

    // Vulnerability: This operation reassigns ownership without verifying that the initial ownership is correctly assigned to the user performing the operation.
    if (letter1.owner.id == user1Id && letter2.owner.id == user2Id) {
      letter1.owner = user2; // Incorrect ownership assignment without proper validation
      letter2.owner = user1; // Incorrect ownership assignment without proper validation
      await this.letterRepository.save([letter1, letter2]);
    }
  }
}

/*"""DELIMITER
A website that allows users to trade unique handwritten letters with strangers around the world.