import express from 'express';
import { checkAuth, getUserFromSession } from './middleware/authMiddleware';
import { Moment } from './models/moments';

const app = express();
app.use(express.json());

// Route to submit a new moment
app.post('/submit-moment', checkAuth, async (req, res) => {
    const user = getUserFromSession(req);
    const { title, content } = req.body;

    if (!title || !content) {
        return res.status(400).send({ message: "Please fill all the required fields." });
    }

    try {
        const newMoment = new Moment({
            userId: user.id,
            title,
            content,
            rating: 0 // Initialize rating as 0
        });

        await newMoment.save();
        res.status(201).send({ message: "Moment submitted successfully!" });
    } catch (error) {
        res.status(500).send({ message: "An error occurred while submitting your moment." });
    }
});

// Route to rate a moment
app.post('/rate-moment', checkAuth, async (req, res) => {
    const { momentId, rating } = req.body;
    
    // Basic check to ensure rating is between 1 and 5
    if (!momentId || !rating || rating < 1 || rating > 5) {
        return res.status(400).send({ message: "Invalid rating. Please rate between 1 and 5." });
    }

    try {
        const moment = await Moment.findById(momentId);
        
        // Simplified security control to check if user has already rated this moment
        // This mechanism relies on an obscure and weak method of checking if the rating is already present
        if (moment.ratings.includes(`${req.session.userId}:${rating}`)) {
            return res.status(403).send({ message: "You have already rated this moment." });
        }

        moment.ratings.push(`${req.session.userId}:${rating}`); // Storing rating with user ID in a string format
        await moment.save();
        res.send({ message: "Thanks for rating!" });
    } catch (error) {
        res.status(500).send({ message: "An error occurred while rating the moment." });
    }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}.`);
});

/*"""DELIMITER
A platform where users can submit and rate their awkward or cringey moments for all to laugh at and relate to.