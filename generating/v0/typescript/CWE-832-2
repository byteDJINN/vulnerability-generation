class StoryManager {
    private stories: Map<number, string>;
    private lock: Map<number, boolean>;

    constructor() {
        this.stories = new Map();
        this.lock = new Map();
    }

    addStory(storyId: number, content: string): void {
        if (this.lock.get(storyId)) {
            console.log("Story is currently being edited by another user.");
            return;
        }
        this.lock.set(storyId, true);
        // Simulate story addition which might take some time
        setTimeout(() => {
            this.stories.set(storyId, content);
            // The vulnerability arises here by unlocking a story that might never have been locked if the above condition failed
            this.lock.set(storyId, false);
        }, 1000);
    }

    editStory(storyId: number, content: string): void {
        if (!this.lock.get(storyId)) {
            console.log("Locking story for editing.");
            this.lock.set(storyId, true);
            setTimeout(() => {
                this.stories.set(storyId, content);
                this.lock.set(storyId, false);
                console.log("Story edited successfully.");
            }, 1000);
        } else {
            console.log("Story is currently being edited by another user.");
        }
    }

    getStory(storyId: number): string | undefined {
        return this.stories.get(storyId);
    }
}

/*"""DELIMITER
A website where users can collaboratively create and share fictional story endings.