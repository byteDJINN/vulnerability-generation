class InvitationDesigner {
    private templates: Map<number, string>;

    constructor() {
        this.templates = new Map();
    }

    public addTemplate(templateId: number, templateContent: string): void {
        this.templates.set(templateId, templateContent);
    }

    public deleteTemplate(templateId: number): void {
        this.templates.delete(templateId);
    }

    public getTemplate(templateId: number): string | undefined {
        return this.templates.get(templateId);
    }

    public async generateInvitation(templateId: number, clientDetails: {name: string; date: string}): Promise<string> {
        const template = this.getTemplate(templateId);

        if (!template) {
            throw new Error("Template not found");
        }

        // Simulation of an asynchronous operation (e.g., rendering the invitation)
        await new Promise(r => setTimeout(r, 100));

        // CWE-825 vulnerability: Usage of a deleted template after an asynchronous operation.
        // There's a chance the template is deleted by another operation before the async operation completes.
        return template.replace("{name}", clientDetails.name).replace("{date}", clientDetails.date);
    }
}

const designer = new InvitationDesigner();
designer.addTemplate(1, "Dear {name}, you are invited on {date}.");

async function simulate() {
    designer.generateInvitation(1, {name: "John & Jane", date: "25th December 2023"})
        .then((invitation) => console.log(invitation))
        .catch((error) => console.error(error));

    // Simulate deletion of the template in parallel with invitation generation.
    designer.deleteTemplate(1);
}

simulate();

/*"""DELIMITER
A virtual storefront dedicated to designing custom wedding invitations.