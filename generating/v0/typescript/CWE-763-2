class MealPlan {
    private recipes: Array<string>;

    constructor() {
        this.recipes = [];
    }

    addRecipe(recipe: string) {
        this.recipes.push(recipe);
    }

    generatePlan() {
        // Simulate generating a meal plan
        if (this.recipes.length === 0) {
            console.error("No recipes to generate a meal plan.");
            return null;
        }

        let plan = this.recipes.join(", ");
        return `Your Custom Meal Plan: ${plan}`;
    }

    clearRecipes() {
        this.recipes.length = 0;
    }
}

class MealPlanUserInterface {
    private mealPlan: MealPlan | null;

    constructor() {
        this.mealPlan = new MealPlan();
    }

    addRecipeToPlan(recipe: string) {
        this.mealPlan?.addRecipe(recipe);
    }

    showGeneratedPlan() {
        let plan = this.mealPlan?.generatePlan();
        if (plan) {
            console.log(plan);
        } else {
            console.log("Failed to generate a meal plan.");
        }
    }

    resetMealPlan() {
        this.mealPlan?.clearRecipes();
        // Introducing the vulnerability by setting mealPlan to null without proper handling
        this.mealPlan = null;
    }
}

// Usage
let ui = new MealPlanUserInterface();
ui.addRecipeToPlan("Grilled Chicken Caesar Salad");
ui.addRecipeToPlan("Quinoa and Black Bean Salad");
ui.showGeneratedPlan();
ui.resetMealPlan();
// This next call attempts to use the mealPlan after it's been set to null, leading to an attempt to access methods of a null object.
ui.addRecipeToPlan("Tomato Soup");  // This line introduces the vulnerability CWE-763

/*"""DELIMITER
A website where users can generate customized meal plans based on their dietary preferences and fitness goals.