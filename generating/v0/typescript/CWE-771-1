import { Request, Response } from 'express';
import Container from '../models/container';
import User from '../models/user';

class ContainerController {
  async swapContainer(req: Request, res: Response) {
    try {
      const { userId, containerId, targetContainerId } = req.body;

      const user = await User.findById(userId);
      if (!user) {
        return res.status(404).send('User not found');
      }

      const containerToSwap = await Container.findById(containerId);
      const targetContainer = await Container.findById(targetContainerId);

      if (!containerToSwap || !targetContainer) {
        return res.status(404).send('One of the containers not found');
      }

      // Check if user owns the container
      if (containerToSwap.owner.toString() !== userId) {
        return res.status(403).send('User does not own the container');
      }

      // Initiate swap
      containerToSwap.owner = targetContainer.owner;
      targetContainer.owner = user._id;

      // Save the swapped ownership (Missing await might lead to untracked promise and the reference to this operation is lost)
      containerToSwap.save();
      targetContainer.save();

      res.status(200).send({ message: 'Containers swapped successfully' });
    } catch (error) {
      console.error('Failed to swap containers', error);
      res.status(500).send('Internal Server Error');
    }
  }
}

export default new ContainerController();

/*"""DELIMITER
A marketplace for swapping shipping containers as alternative housing solutions.