class VirtualEscapeRoom {
    constructor(private roomData: any) {}

    async initRoom() {
        this.roomData.rooms.forEach(room => {
            this[`load${room.name.replace(/\s/g, '')}`] = new Function('teamId', `
                if (!this.roomData.teams.find(team => team.id === teamId)) {
                    console.log('Team not found');
                    return;
                }
                console.log('Loading ${room.name}');
                // Dynamically require puzzles based on room configuration
                const puzzles = require('./puzzles/' + this.roomData.rooms.find(r => r.name === "${room.name}").puzzleFile);
                puzzles.init(teamId);
            `);
        });
    }

    startPuzzle(roomName: string, teamId: number) {
        const methodName = `load${roomName.replace(/\s/g, '')}`;
        if (this[methodName]) {
            this[methodName](teamId);
        } else {
            console.log('Room not found');
        }
    }
}

// Example usage:
// Assuming we have a room data object that includes room names and puzzle files
let roomData = {
    rooms: [
        { name: "Ancient Tomb", puzzleFile: "ancientTombPuzzles.js" },
        { name: "Space Odyssey", puzzleFile: "spaceOdysseyPuzzles.js" }
    ],
    teams: [
        { id: 1, name: "Team A" },
        { id: 2, name: "Team B" }
    ]
};

let escapeRoom = new VirtualEscapeRoom(roomData);
escapeRoom.initRoom().then(() => {
    escapeRoom.startPuzzle("Ancient Tomb", 1); // Starts the Ancient Tomb puzzle for Team A
});

/*"""DELIMITER
A virtual escape room booking platform that allows users to join teams, solve puzzles, and compete against others in a race to escape first.