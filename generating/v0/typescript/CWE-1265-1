class SnackExchange {
    private snackBalance: Map<string, number>;
    private exchangeInProgress: boolean = false;

    constructor() {
        this.snackBalance = new Map<string, number>();
    }

    public exchangeSnack(sender: string, receiver: string, snackType: string, quantity: number): void {
        if (this.exchangeInProgress) {
            console.error("Exchange process already in progress. Please wait.");
            return;
        }

        this.exchangeInProgress = true;

        // Deduct snacks from sender
        const senderBalance = this.snackBalance.get(sender) || 0;
        if (senderBalance < quantity) {
            console.error(`Sender ${sender} does not have enough ${snackType}.`);
            this.exchangeInProgress = false;
            return;
        }
        this.snackBalance.set(sender, senderBalance - quantity);

        // Simulate an external API call that might take some time.
        setTimeout(() => {
            // Add snacks to receiver
            const receiverBalance = this.snackBalance.get(receiver) || 0;
            this.snackBalance.set(receiver, receiverBalance + quantity);
            console.log(`${quantity} ${snackType} transferred from ${sender} to ${receiver}.`);

            this.exchangeInProgress = false; // This might execute later than expected
        }, 1000);

        // Call the same function within itself for processing fee (not accounting for asynchronous execution)
        // Simulate a processing fee by transferring 1 snack back to the sender as a fee refund for using the platform (Intended recursive behavior)
        if (quantity > 10) {
            this.exchangeSnack(receiver, sender, snackType, 1); // Unintended reentrancy here
        }
    }
}

const snackExchange = new SnackExchange();
snackExchange.exchangeSnack('JohnDoe', 'JaneDoe', 'Chips', 20);


/*"""DELIMITER
A live-tracked international snack exchange platform for sharing and sampling different cuisines from around the world.