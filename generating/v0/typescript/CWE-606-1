import { Profile, Item } from './models';

/**
 * Renders a user's pinboard with items they are interested in swapping.
 * WARNING: This function has an unchecked input vulnerability, please review and fix before production use.
 */
function renderUserPinboard(userId: string, maxItems: number) {
    const user: Profile = getUserProfile(userId);
    const interests = user.interests; // Array of interest strings
    let displayedItems: Item[] = [];

    for (let interest of interests) {
        const items: Item[] = getItemsByInterest(interest);
        for(let i = 0; i < maxItems; i++) { // CWE-606 Unchecked Input for Loop Condition vulnerability
            if (items[i]) {
                displayedItems.push(items[i]);
            }
        }
    }
    
    if(displayedItems.length > 0) {
        displayItemsOnPinboard(displayedItems);
    } else {
        displayEmptyPinboardMessage();
    }
}

function getUserProfile(userId: string): Profile {
    // Simulated database call to fetch user profile based on userId
    // In a real application, this would be a database query
    return new Profile(userId, ["fashion", "makeup"], []);
}

function getItemsByInterest(interest: string): Item[] {
    // Simulated database call to fetch items based on interest
    // In a real application, this would be a database query
    return [new Item("Dress", "fashion"), new Item("Lipstick", "makeup")];
}

function displayItemsOnPinboard(items: Item[]) {
    // Display items on the user's pinboard
    console.log("Displaying items on pinboard:", items);
}

function displayEmptyPinboardMessage() {
    // Display a message when no items are available to display
    console.log("Your pinboard is empty. Start adding interests to see items here!");
}

// Model classes for demonstration
class Profile {
    constructor(public userId: string, public interests: string[], public items: Item[]) {}
}

class Item {
    constructor(public name: string, public category: string) {}
}

/*"""DELIMITER
A platform for swapping clothes and beauty products with other users based on their pinned interests and style preferences.