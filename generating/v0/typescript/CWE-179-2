import express from 'express';
import { body, validationResult } from 'express-validator';

const app = express();
app.use(express.json());

interface TravelRequest {
  destination: string;
  startDate: string;
  endDate: string;
  message: string;
}

app.post('/api/travel-companion', [
  body('destination').not().isEmpty().withMessage('Destination is required'),
  body('startDate').isDate().withMessage('Start date must be a valid date'),
  body('endDate').isDate().withMessage('End date must be a valid date'),
  body('message').optional().isLength({ max: 500 }).withMessage('Message cannot exceed 500 characters'),
], (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }

  // Simulate a database operation
  setTimeout(() => {
    const travelRequest: TravelRequest = req.body;

    // Early validation passed but further validations should be here
    // For instance, check if the startDate is before the endDate which is missing
    // Vulnerability: Incorrect Behavior Order: Early Validation, as correct order of operation isn't maintained

    console.log('Saving travel request:', travelRequest);
    // Ideally, we would save to a database here

    return res.json({
      message: "Travel companion request submitted successfully!",
      request: travelRequest,
    });
  }, 1000); // Simulate database delay
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});

/*"""DELIMITER
A platform that connects solo travelers looking for companions to explore new destinations together.