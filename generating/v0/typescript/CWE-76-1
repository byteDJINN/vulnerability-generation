import express from 'express';
import { exec } from 'child_process';

const app = express();

app.use(express.json());

app.post('/createPlaylist', (req, res) => {
    const { user, playlistName } = req.body;

    const command = `mkdir -p /playlists/${user}/${playlistName}`;

    // Create a directory for a new playlist
    exec(command, (error, stdout, stderr) => {
        if (error) {
            return res.status(500).send({ message: "Error creating your playlist" });
        }
        res.status(200).send({ message: "Playlist created successfully!" });
    });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

/*"""DELIMITER
A platform for people to virtually curate and exchange personalized playlists of motivational speeches.
```typescript
|CODE|
```

### Explanation of the Vulnerability (CWE-76)
This code snippet contains a vulnerability related to CWE-76: "Improper Neutralization of Equivalent Special Elements." This vulnerability occurs because the code directly uses user-supplied input (`user` and `playlistName`) in a shell command without proper validation or escaping. This can lead to a security risk known as command injection, where an attacker can inject additional commands to be executed on the server. For example, if a malicious user provides a `playlistName` of `"; rm -rf / #`, it results in executing a destructive command on the server.

### How Can This Be Exploited?
An attacker can exploit this vulnerability by sending a specially crafted request with malicious content in either the `user` or `playlistName` field. This would allow them to execute arbitrary commands on the server, potentially leading to unauthorized access to the server's data, modification of system files, or a complete system compromise.

### How to Fix the Vulnerability
To remediate this issue, it's crucial to properly handle user input that will be included in shell commands. One approach is to strictly validate the input to ensure it only contains safe characters. Alternatively, using parameterized APIs or libraries that specifically handle command execution with user input can also mitigate this issue. Here's an example of using a parameterized approach:

```typescript
import express from 'express';
import { execFile } from 'child_process';

const app = express();

app.use(express.json());

app.post('/createPlaylist', (req, res) => {
    const { user, playlistName } = req.body;

    // Ensure the directory path is safe
    const userDir = `/playlists/${user}`;
    const playlistDir = `${userDir}/${playlistName}`;

    execFile('mkdir', ['-p', playlistDir], (error, stdout, stderr) => {
        if (error) {
            return res.status(500).send({ message: "Error creating your playlist" });
        }
        res.status(200).send({ message: "Playlist created successfully!" });
    });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
```
This alternative approach uses `execFile` with parameterization, which mitigates the risk of executing arbitrary shell commands since the inputs are treated as separate arguments to the `mkdir` command, not as part of the command line.