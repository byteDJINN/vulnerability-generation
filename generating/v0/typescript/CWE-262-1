import express from 'express';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import User from '../models/user.model';

const router = express.Router();

router.post('/signup', async (req, res) => {
    try {
        const { email, password, fullName } = req.body;
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).send('Email already in use.');
        }
        const hashedPassword = await bcrypt.hash(password, 8);
        const user = new User({
            email,
            password: hashedPassword,
            fullName
        });
        await user.save();
        const token = jwt.sign({ id: user._id }, 'secret_key', { expiresIn: '2h' });
        res.status(201).send({ user, token });
    } catch (e) {
        res.status(500).send('Internal Server Error.');
    }
});

router.post('/login', async (req, res) => {
    try {
        const { email, password } = req.body;
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(404).send('User not found.');
        }
        const isPasswordMatch = await bcrypt.compare(password, user.password);
        if (!isPasswordMatch) {
            return res.status(400).send('Invalid login credentials.');
        }
        const token = jwt.sign({ id: user._id }, 'secret_key', { expiresIn: '2h' });
        res.send({ user, token });
    } catch (e) {
        res.status(500).send('Internal Server Error.');
    }
});

export default router;

/*"""DELIMITER
A virtual marketplace connecting photographers in search of unique outdoor shooting locations with homeowners willing to rent out their property for photo shoots.