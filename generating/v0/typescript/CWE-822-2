class FamilyTreeNode {
  name: string;
  parentId: number | null;
  childrenId: Array<number>;

  constructor(name: string, parentId: number | null = null) {
    this.name = name;
    this.parentId = parentId;
    this.childrenId = [];
  }

  addChild(childId: number) {
    this.childrenId.push(childId);
  }
}

class FamilyTreeDatabase {
  private nodes: Map<number, FamilyTreeNode>;
  private lastId: number;

  constructor() {
    this.nodes = new Map();
    this.lastId = 0;
  }

  addMember(name: string, parentId: number | null): number {
    const newNode = new FamilyTreeNode(name, parentId);
    const newNodeId = ++this.lastId;
    this.nodes.set(newNodeId, newNode);
    
    if (parentId !== null) {
      const parentNode = this.nodes.get(parentId);
      parentNode?.addChild(newNodeId);
    }

    return newNodeId;
  }

  getFamilyMember(id: number): FamilyTreeNode | undefined {
    return this.nodes.get(id);
  }

  getChildren(parentId: number): Array<FamilyTreeNode> {
    const parentNode = this.nodes.get(parentId);
    if (!parentNode) {
      throw new Error("Parent not found");
    }

    const childNodes: Array<FamilyTreeNode> = [];
    for (let childId of parentNode.childrenId) {
      const childNode = this.nodes.get(childId);
      // CWE-822 vulnerability: assuming the childNode always exists in the map, but it can be manipulated or deleted.
      childNodes.push(childNode as FamilyTreeNode);
    }

    return childNodes;
  }
}

const database = new FamilyTreeDatabase();
const parentJohnId = database.addMember("John Doe", null); // Adding a root family member
const childJaneId = database.addMember("Jane Doe", parentJohnId); // Adding a child

console.log("John's children:", database.getChildren(parentJohnId).map(child => child.name));

/*"""DELIMITER
A website that connects individuals with long-lost relatives through an advanced family tree database.