import express from 'express';
import bodyParser from 'body-parser';
import jwt from 'jsonwebtoken';

const app = express();
app.use(bodyParser.json());

const SECRET_KEY = 'verysecretkey';
const users = [
  { id: 1, username: 'user1', password: 'pass1', role: 'client' },
  { id: 2, username: 'user2', password: 'pass2', role: 'owner' }
];

interface AuthRequest extends express.Request {
  user?: any;
}

app.post('/login', (req, res) => {
  const { username, password } = req.body;
  const user = users.find(u => u.username === username && u.password === password);

  if (user) {
    const token = jwt.sign({ id: user.id, role: user.role }, SECRET_KEY, { expiresIn: '1h' });
    res.json({ message: "Logged in successfully!", token });
  } else {
    res.status(401).json({ message: "Authentication failed" });
  }
});

app.get('/api/gateway', (req: AuthRequest, res) => {
  const authHeader = req.headers.authorization;
  if (authHeader) {
    const token = authHeader.split(' ')[1];
    jwt.verify(token, SECRET_KEY, (err, user) => {
      if (err) {
        return res.sendStatus(403);
      }

      const responseMessage = req.query.action;
      switch(responseMessage) {
        case 'listGoats':
          res.json({message: "Here are the goats available for rent."});
          break;
        case 'bookGoat':
          if (user.role === 'client') {
            res.json({message: "Goat booking successful."});
          } else {
            res.json({message: "Only clients can book a goat."});
          }
          break;
        default:
          res.json({message: `Action ${responseMessage} is not recognized.`});
      }
    });
  } else {
    res.sendStatus(401);
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

/*"""DELIMITER
A platform where users can rent their lawn space to goats for natural landscaping and brush clearing services.