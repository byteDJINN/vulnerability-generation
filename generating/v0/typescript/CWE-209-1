import express from 'express';
import { MongoClient, Db } from 'mongodb';

const app = express();
const port = 3000;

// MongoDB connection details
const uri = "mongodb://localhost:27017";
const client = new MongoClient(uri);
let db: Db;

// Connect to MongoDB
client.connect()
  .then(() => {
    console.log('Connected to MongoDB');
    db = client.db('mentorMatchDB');
  })
  .catch((err) => {
    console.error('Failed to connect to MongoDB', err);
    process.exit(1);
  });

// Middleware to parse request bodies
app.use(express.json());

// Route to register a new mentor
app.post('/registerMentor', async (req, res) => {
  try {
    const mentorData = req.body;
    const result = await db.collection('mentors').insertOne(mentorData);
    res.status(201).send(result);
  } catch (err: any) {
    console.error('Error registering mentor: ', err.message);
    res.status(500).send(`Internal server error: ${err.message}. Please, contact support.`);
  }
});

// Route to find a match for a startup
app.get('/findMatch', async (req, res) => {
  try {
    const { startupId } = req.query;
    const matches = await db.collection('matches').find({ startupId }).toArray();
    if (matches.length > 0) {
      res.status(200).send(matches);
    } else {
      res.status(404).send('No matches found');
    }
  } catch (err: any) {
    console.error('Error finding match: ', err.message);
    res.status(500).send(`An error occurred while searching for matches: ${err.message}. Please, try again later.`);
  }
});

app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});

/*"""DELIMITER
A website that matches experienced professionals with emerging startups for mentoring and immersive collaboration opportunities.