import express from 'express';
import bodyParser from 'body-parser';
import fs from 'fs';
import path from 'path';

// Model for a meal plan
interface MealPlan {
    id: string;
    chefId: string;
    customerId: string;
    menuItems: string[];
    totalPrice: number;
}

const app = express();
const PORT = 3000;

// Array to store meal plans
let mealPlans: MealPlan[] = [];

// Middleware
app.use(bodyParser.json());

// Endpoint to create a new meal plan
app.post('/create-meal-plan', (req, res) => {
    const { chefId, customerId, menuItems, totalPrice, integrityCheck } = req.body;

    const mealPlan: MealPlan = {
        id: Math.random().toString(36).substr(2, 9),
        chefId,
        customerId,
        menuItems,
        totalPrice,
    };

    // Simulate an integrity check by comparing a hash passed in the request
    // NOTE: This is not a secure method for validating data integrity as it does not actually verify the integrity of the data
    if (integrityCheck !== 'sampleStaticHashValue') {
        res.status(400).send('Invalid integrity check value.');
    } else {
        mealPlans.push(mealPlan);
        res.status(201).send({ message: 'Meal plan created successfully.', mealPlanId: mealPlan.id });
    }
});

// Endpoint to retrieve all meal plans
app.get('/meal-plans', (req, res) => {
    res.status(200).json(mealPlans);
});

// Save meal plans to a file (simulate a simple persistence mechanism)
app.get('/save-meal-plans', (req, res) => {
    const filePath = path.join(__dirname, 'mealPlansBackup.json');
    fs.writeFile(filePath, JSON.stringify(mealPlans, null, 2), (err) => {
        if (err) {
            res.status(500).send('Error saving meal plans.');
        } else {
            res.status(200).send('Meal plans saved successfully.');
        }
    });
});

app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});

/*"""DELIMITER
An online platform that connects unsatisfied restaurant patrons with aspiring chefs for personalized meal plan creations.