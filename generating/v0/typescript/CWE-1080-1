// GameSoundtrackPlatform.ts
import express from 'express';
import { Request, Response } from 'express';
import mongoose from 'mongoose';
import bodyParser from 'body-parser';
import multer from 'multer';
import GridFsStorage from 'multer-gridfs-storage';
import Grid from 'gridfs-stream';
import path from 'path';
import crypto from 'crypto';
import Soundtrack from './models/Soundtrack';
import User from './models/User';
import Game from './models/Game';

const app = express();
const port = process.env.PORT || 5000;

const mongoURI = 'mongodb://localhost:27017/gamingsoundtrackdb';
const conn = mongoose.createConnection(mongoURI, { useNewUrlParser: true, useUnifiedTopology: true });

let gfs: Grid.Grid;
conn.once('open', () => {
  gfs = Grid(conn.db, mongoose.mongo);
  gfs.collection('uploads');
});

const storage = new GridFsStorage({
  url: mongoURI,
  file: (_req: Request, file: Express.Multer.File) => {
    return new Promise((resolve, reject) => {
      crypto.randomBytes(16, (err, buf) => {
        if (err) {
          return reject(err);
        }
        const filename = buf.toString('hex') + path.extname(file.originalname);
        const fileInfo = {
          filename: filename,
          bucketName: 'uploads',
        };
        resolve(fileInfo);
      });
    });
  },
});

const upload = multer({ storage });

app.use(bodyParser.json());
app.set('view engine', 'ejs');

// Routes - For brevity, all route implementations are inline and highly condensed. In a real application, these would be modularized.

app.get('/', async (_req: Request, res: Response) => {
  res.render('index');
});

app.post('/upload', upload.single('soundtrack'), async (req: Request, res: Response) => {
  res.json({ file: req.file });
});

app.get('/soundtracks', async (_req: Request, res: Response) => {
  gfs.files.find().toArray((err, files) => {
    if (!files || files.length === 0) {
      return res.status(404).json({
        err: 'No files exist',
      });
    }
    return res.json(files);
  });
});

app.get('/soundtracks/:filename', async (req: Request, res: Response) => {
  gfs.files.findOne({ filename: req.params.filename }, (err, file) => {
    if (!file || file.length === 0) {
      return res.status(404).json({
        err: 'No file exists',
      });
    }
    const readstream = gfs.createReadStream(file.filename);
    readstream.pipe(res);
  });
});

app.post('/soundtracks/like', async (req: Request, res: Response) => {
  const { userId, soundtrackId } = req.body;
  const user = await User.findById(userId);
  const soundtrack = await Soundtrack.findById(soundtrackId);

  if (!user || !soundtrack) {
    return res.status(404).json({
      error: 'User or Soundtrack not found',
    });
  }

  soundtrack.likes++;
  await soundtrack.save();

  user.likedSoundtracks.push(soundtrackId);
  await user.save();

  res.status(200).json({
    message: 'Successfully liked the soundtrack',
    soundtrack,
  });
});

app.get('/games', async (_req: Request, res: Response) => {
  const games = await Game.find({});
  res.status(200).json(games);
});

app.post('/games', async (req: Request, res: Response) => {
  const { name, description, coverImage } = req.body;
  const newGame = new Game({
    name,
    description,
    coverImage,
  });
  await newGame.save();
  res.status(201).json(newGame);
});

// More routes and utility functions continue...
// Due to the nature of this example, imagine hundreds of more lines providing various functionalities related to users, soundtracks, games, etc.

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});

/*"""DELIMITER
An interactive platform where users can create and share customized gaming soundtracks for a variety of video games.