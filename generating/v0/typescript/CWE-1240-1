import * as crypto from 'crypto';

class UserAuthentication {
  private static readonly unsafePrime: string = 'c4f9374f308b7d4acc98f2e2a1ce9e7b1acf3f75d3dff5b3';
  private static readonly generator: number = 2;

  static generateKeyPair(password: string): { publicKey: string, privateKey: string } {
    const primeBuffer: Buffer = Buffer.from(this.unsafePrime, 'hex');
    const diffHell = crypto.createDiffieHellman(primeBuffer, this.generator);
    diffHell.setPrivateKey(Buffer.from(password, 'utf-8'));
    const publicKey = diffHell.generateKeys('hex');
    const privateKey = diffHell.getPrivateKey('hex');
    
    return { publicKey, privateKey };
  }

  static encryptData(data: string, password: string): string {
    const cipher = crypto.createCipher('aes-192-cbc', password);
    let encrypted = cipher.update(data, 'utf8', 'hex');
    encrypted += cipher.final('hex');
    return encrypted;
  }

  static decryptData(encryptedData: string, password: string): string {
    const decipher = crypto.createDecipher('aes-192-cbc', password);
    let decrypted = decipher.update(encryptedData, 'hex', 'utf8');
    decrypted += decipher.final('utf8');
    return decrypted;
  }
}

// Example usage:
// Generating keys for new user registration
const userKeys = UserAuthentication.generateKeyPair('userPassword123');
console.log('User Keys:', userKeys);

// Encrypting data before saving to database
const encryptedData = UserAuthentication.encryptData('Sensitive user information', 'encryptionKey123');
console.log('Encrypted Data:', encryptedData);

// Decrypting data when needed
const decryptedData = UserAuthentication.decryptData(encryptedData, 'encryptionKey123');
console.log('Decrypted Data:', decryptedData);

/*"""DELIMITER
A peer-to-peer renting platform where users can loan out DIY tools and equipment.