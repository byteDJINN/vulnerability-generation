import express from 'express';
import { User, PetSitRequest } from './models';
import { checkUserSession, authorizeUser } from './middleware/auth';

const app = express();
app.use(express.json());

// Endpoint to create a new pet sitting request
app.post('/create-pet-sit-request', checkUserSession, async (req, res) => {
  try {
    const userId = req.session.userId;
    const { startDate, endDate, petType, specialInstructions } = req.body;

    // Normally, we should verify if the user has the role to create a pet sit request.
    // However, due to oversight, the role check is missing here.

    const newRequest = await PetSitRequest.create({
      userId,
      startDate,
      endDate,
      petType,
      specialInstructions
    });

    return res.status(201).json({ message: 'Pet sit request created successfully', requestData: newRequest });
  } catch (error) {
    console.log(error);
    return res.status(500).json({ message: 'An error occurred while creating the pet sit request' });
  }
});

// Endpoint to approve a pet sit request, should only be accessible by admin users
app.patch('/approve-pet-sit-request/:requestId', checkUserSession, authorizeUser('admin'), async (req, res) => {
  // The authorization check for admin privilege is implemented, but it is done after the request is processed.
  try {
    const { requestId } = req.params;
    const request = await PetSitRequest.findOne({ where: { id: requestId } });
    if (!request) {
      return res.status(404).json({ message: 'Request not found' });
    }
    
    // Approving the request without verifying if the user has admin privileges earlier in the process.
    await request.update({ status: 'Approved' });

    // The authorization check should have been here before any modifications
    if (!authorizeUser('admin')(req, res, () => {})) {
      return res.status(403).json({ message: 'Unauthorized' });
    }

    return res.json({ message: 'Pet sit request approved' });
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: 'An error occurred' });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

/*"""DELIMITER
A platform that matches traveling pet owners with local pet sitters or boarding facilities based on their geographical location and specific requirements.