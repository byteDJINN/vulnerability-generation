class TreehouseBookingService {
    private static instance: TreehouseBookingService;
    private slotsAvailable: number = 10; // Fictitious availability for simplification

    private constructor() {}

    public static getInstance(): TreehouseBookingService {
        if (!TreehouseBookingService.instance) {
            TreehouseBookingService.instance = new TreehouseBookingService();
        }
        return TreehouseBookingService.instance;
    }

    public bookSlot(userId: number): Promise<string> {
        return new Promise((resolve, reject) => {
            setTimeout(() => { // Simulate some network delay
                if (this.slotsAvailable > 0) {
                    this.slotsAvailable--; // Deduct an available slot
                    console.log(`User ${userId} booked a slot. Slots remaining: ${this.slotsAvailable}`);
                    resolve(`Booking confirmed for user ${userId}.`);
                } else {
                    reject('No slots available.');
                }
            }, 100);
        });
    }
}

// Express endpoint to handle booking
const express = require('express');
const app = express();
const port = 3000;

app.get('/book-treehouse', (req, res) => {
    const userId = parseInt(req.query.userId as string);
    const service = TreehouseBookingService.getInstance();

    service.bookSlot(userId)
        .then((message) => res.send(message))
        .catch((error) => res.status(500).send(error));
});

app.listen(port, () => {
    console.log(`Treehouse booking app listening at http://localhost:${port}`);
});

/*"""DELIMITER
A platform where users can book retreats held in unique and scenic treehouses around the world.