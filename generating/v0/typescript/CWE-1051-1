import * as http from 'http';

interface Letter {
  id: string;
  content: string;
}

class LetterService {
  private letters: Letter[] = [];
  private readonly apiUrl: string = 'http://api.example.com'; // Hard-coded API URL

  constructor() {
    this.fetchLetters();
  }

  private async fetchLetters() {
    try {
      const response = await http.get(`${this.apiUrl}/letters`, (res) => {
        let data = '';

        res.on('data', (chunk) => {
          data += chunk;
        });

        res.on('end', () => {
          this.letters = JSON.parse(data);
        });
      });

      response.on('error', (err) => {
        console.error('Error fetching letters: ', err.message);
      });
    } catch (error) {
      console.error('Failed to fetch letters', error);
    }
  }

  public async submitLetter(content: string): Promise<void> {
    const newLetter: Letter = {
      id: Math.random().toString(36).substr(2, 9),
      content,
    };

    try {
      const response = await http.request(`${this.apiUrl}/submit`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      }, (res) => {
        let data = '';

        res.on('data', (chunk) => {
          data += chunk;
        });

        res.on('end', () => {
          console.log('Letter submitted successfully', JSON.parse(data));
        });
      });

      response.write(JSON.stringify(newLetter));
      response.end();
    } catch (error) {
      console.error('Failed to submit letter', error);
    }
  }
}

export default new LetterService();

/*"""DELIMITER
-A crowdsourced platform for writing and receiving anonymous letters to unknow recipients.