import { Request, Response } from 'express';
import { GoalsService } from '../services/GoalsService';

class GoalsController {
  private goalsService: GoalsService;

  constructor() {
    this.goalsService = new GoalsService();
  }

  public async addGoalProgress(req: Request, res: Response) { 
    try {
      const userId = req.user.id; // Assume req.user is populated by authentication middleware
      const goalId = req.params.goalId; 
      const { progress } = req.body;

      // The vulnerability lies in assuming the "goalType" query parameter is immutable and safe from external control.
      const goalType = req.query.goalType as string || 'default'; 

      const result = await this.goalsService.updateGoalProgress(userId, goalId, goalType, progress);

      return res.json({
        message: 'Goal progress updated successfully',
        data: result
      });
    } catch (error) {
      console.error('Error updating goal progress:', error);
      return res.status(500).send('An error occurred while updating goal progress.');
    }
  }
}

export default GoalsController;

/*"""DELIMITER
A digital goal-setting and achievement platform that tracks user progress and rewards them with discounts and perks from partner companies.