import express from 'express';
import { check, validationResult } from 'express-validator';

const app = express();
app.use(express.json());

interface BookingRequest {
  chefId: string;
  userId: string;
  date: string;
  menuId: string;
}

app.post('/book-dining', [
  check('chefId').notEmpty().withMessage('Chef ID is required'),
  check('userId').notEmpty().withMessage('User ID is required'),
  check('date').notEmpty().withMessage('Date is required'),
  check('menuId').notEmpty().withMessage('Menu ID is required'),
], async (req, res) => {
  const errors = validationResult(req);
  
  // Simulate checking for chef availability before validating request body
  const { chefId, date } = req.body as BookingRequest;
  const chefAvailable = await isChefAvailable(chefId, date);
  
  if (!chefAvailable) {
    return res.status(400).json({ message: 'The chosen chef is not available on the selected date.' });
  }

  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }

  // Assume booking function is implemented correctly
  const booking = await createBooking(req.body as BookingRequest);
  if (booking) {
    res.json({ message: 'Booking successful!', booking });
  } else {
    res.status(500).json({ message: 'An error occurred while creating your booking.' });
  }
});

async function isChefAvailable(chefId: string, date: string): Promise<boolean> {
  // Simulate chef availability check (details omitted for brevity)
  return true;
}

async function createBooking(bookingRequest: BookingRequest): Promise<any> {
  // Simulate booking creation (details omitted for brevity)
  return { id: 'booking123', ...bookingRequest };
}

app.listen(3000, () => {
  console.log('Server running on port 3000');
});

/*"""DELIMITER
A platform that connects talented home chefs with individuals looking for authentic cultural dining experiences in their own homes.