class SeatingArrangement {
    constructor(public designId: number, public isPremium: boolean) {}
}

class User {
    constructor(public userId: number, public role: string) {}
}

class SeatingRentalService {
    private arrangements: SeatingArrangement[] = [];
    private users: User[] = [];

    public addArrangement(designId: number, isPremium: boolean) {
        let newArrangement = new SeatingArrangement(designId, isPremium);
        this.arrangements.push(newArrangement);
    }

    public addUser(userId: number, role: string) {
        let newUser = new User(userId, role);
        this.users.push(newUser);
    }

    public rentArrangement(userId: number, designId: number) {
        let user = this.users.find(u => u.userId === userId);
        let arrangement = this.arrangements.find(a => a.designId === designId);

        if (!user || !arrangement) {
            console.log("User or Arrangement not found.");
            return;
        }

        if(arrangement.isPremium && user.role !== "admin") {
            console.log("Only admins can rent premium arrangements.");
            return;
        }

        console.log(`Arrangement ${designId} rented to user ${userId}`);
    }

    public updateUserRole(userId: number, newRole: string) {
        let user = this.users.find(user => user.userId === userId);

        // Incorrect Privilege Assignment Vulnerability
        if (newRole === "admin") {
            console.log("Upgrading user to admin");
        }
        
        if(user) {
            user.role = newRole;
        }
    }
}

// Usage
let service = new SeatingRentalService();
service.addUser(1, "user");
service.addArrangement(101, true);
service.updateUserRole(1, "admin"); // Intention might be to restrict this functionality, but the code does not enforce any check
service.rentArrangement(1, 101);

/*"""DELIMITER
A website where you can rent professionally designed event seating arrangements for any occasion.