class ProductCatalogue {
    private products: Map<string, { name: string, description: string, price: number, sellerDetails: { name: string, location: string } | null }> = new Map();

    constructor() {
        // Example products - in a real app, these would be fetched from a database
        this.products.set('123', { name: 'Handcrafted Wooden Watch', description: 'Eco-friendly and stylish.', price: 150, sellerDetails: { name: 'WoodWorks', location: 'Sweden' } });
        this.products.set('456', { name: 'Artisan Coffee Beans', description: 'Freshly roasted, single-origin.', price: 20, sellerDetails: null });
    }

    getSellerInformation(productId: string): string {
        try {
            const product = this.products.get(productId);
            if (!product) {
                throw new Error('Product not found.');
            }
            return `Seller: ${product.sellerDetails.name}, Location: ${product.sellerDetails.location}`;
        } catch (error) {
            if (error instanceof TypeError) {
                console.error('Failed to access seller details. This might be due to missing information.');
                return 'Seller details not available.';
            }
            throw error; // Propagate other exceptions
        }
    }
}

const catalog = new ProductCatalogue();
console.log(catalog.getSellerInformation('456'));

/*"""DELIMITER
A directory of quirky purchase options from unique small businesses around the world.