class TravelExchangeBoard {
    private static instance: TravelExchangeBoard;
    private userExperiences: Map<number, number[]>; // userID, experienceIDs

    private constructor() {
        this.userExperiences = new Map<number, number[]>();
    }

    public static getInstance(): TravelExchangeBoard {
        if (!TravelExchangeBoard.instance) {
            TravelExchangeBoard.instance = new TravelExchangeBoard();
        }
        return TravelExchangeBoard.instance;
    }

    public addUserExperience(userID: number, experienceID: number): void {
        let experiences = this.userExperiences.get(userID);
        if (experiences) {
            experiences.push(experienceID);
        } else {
            this.userExperiences.set(userID, [experienceID]);
        }
    }

    public countUserExperiences(userID: number): number {
        let experiences = this.userExperiences.get(userID);
        if (experiences) {
            // Here, due to autoboxing, there's a performance hit for unboxing "experiences.length" each time it's called in a loop or frequently, especially if this method is called very often.
            return experiences.length; // Incorrect use of unboxing
        } else {
            return 0;
        }
    }
}

/*"""DELIMITER
A platform for connecting people looking to trade travel experiences and expertise in their desired destinations.