import express from 'express';
import bodyParser from 'body-parser';
import { Item } from './models/Item';
import { User } from './models/User';

const app = express();
const port = 3000;

app.use(bodyParser.json());

// Endpoint to view item details
app.get('/item/:itemId', async (req, res) => {
  try {
    const { itemId } = req.params;
    const item = await Item.findById(itemId);
    if (item) {
      res.status(200).json(item);
    } else {
      res.status(404).send('Item not found.');
    }
  } catch (error) {
    res.status(500).send(error.message);
  }
});

// Endpoint to update item details
// Users can update items by providing their userId in the request body.
// The vulnerability lies in trusting the userId supplied by the user in the request to authenticate their authority to update the item.
app.post('/item/update/:itemId', async (req, res) => {
  try {
    const { itemId } = req.params;
    const { userId, updatedDetails } = req.body;

    const item = await Item.findById(itemId);
    if (item) {
      const owner = await User.findById(userId);
      if (owner && item.ownerId === userId) {
        const updatedItem = await Item.findByIdAndUpdate(itemId, { $set: updatedDetails }, { new: true });
        res.status(200).json(updatedItem);
      } else {
        res.status(403).send('Unauthorized to update this item.');
      }
    } else {
      res.status(404).send('Item not found.');
    }
  } catch (error) {
    res.status(500).send(error.message);
  }
});

app.listen(port, () => {
  console.log(`Thrift Store app listening at http://localhost:${port}`);
});

/*"""DELIMITER
A virtual thrift store where users swap or sell gently-used clothing and accessories.