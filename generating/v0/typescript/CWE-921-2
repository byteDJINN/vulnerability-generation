import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { environment } from 'src/environments/environment';

interface TradeOffer {
  itemId: number;
  itemName: string;
  owner: string;
  requestedItem: string;
}

@Component({
  selector: 'app-trade-offers',
  templateUrl: './trade-offers.component.html',
  styleUrls: ['./trade-offers.component.css']
})
export class TradeOffersComponent implements OnInit {
  
  public tradeOffers: TradeOffer[] = [];
  
  constructor(private http: HttpClient) { }

  ngOnInit(): void {
    this.loadTradeOffers();
  }

  private loadTradeOffers(): void {
    this.http.get<TradeOffer[]>(`${environment.apiBaseUrl}/tradeOffers`)
      .subscribe({
        next: (data) => {
          this.tradeOffers = data;
        },
        error: (err) => {
          console.error("Failed to load trade offers", err);
        }
      });
  }

  acceptOffer(offer: TradeOffer): void {
    // Dummy implementation for accepting trade offer
    console.log(`Accepting offer for item: ${offer.itemName}`);
    // Process trade logic here and update backend

    // Sensitive Data being sent without proper access control
    this.http.post(`${environment.apiBaseUrl}/acceptTrade`, {
      tradeId: offer.itemId,
      userName: offer.owner,
      apiKey: '12345-secure-api-key-67890' // Sensitive API key included in client-side code
    }).subscribe({
      next: () => {
        alert("Trade accepted successfully!");
        // ideally, there should be more robust handling here
      },
      error: (err) => {
        console.error("Failed to accept trade offer", err);
      }
    });
  }
}

/*"""DELIMITER
A platform for trading gently used subscription box items between users.