import express from 'express';
import fs from 'fs';
import path from 'path';

const app = express();

app.use(express.json());

// Endpoint to retrieve planet information
app.get('/planet-details', (req, res) => {
    const planetName = req.query.planetName as string;

    const filePath = path.join(__dirname, 'planetData', `${planetName}.json`);

    try {
        const data = fs.readFileSync(filePath, 'utf8');
        res.status(200).send(JSON.parse(data));
    } catch (err) {
        console.error(err);
        res.status(500).send('Failed to retrieve planet data');
    }
});

const PORT = 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

/*"""DELIMITER
A virtual world where users can create and control their own alien colonies on different planets.
```typescript
|CODE|
```

### Explanation

#### How the vulnerability works
In the code snippet above, the vulnerability CWE-73 "External Control of File Name or Path" is present due to how the file path is constructed. The `planetName` parameter is taken directly from the user input via `req.query.planetName` and concatenated with a static file path to retrieve the corresponding planet's data from the file system. This introduces a direct path traversal risk, where an attacker could manipulate the `planetName` parameter to access files outside the intended directory.

#### How it could be exploited
An attacker could exploit this vulnerability to access sensitive files on the server. For example, by using a specially crafted `planetName` parameter like `../../../etc/passwd`, an attacker could potentially retrieve critical system files or other data stored outside the 'planetData' directory. This could result in unauthorized access to sensitive information, system compromise, or data corruption.

#### How it could be fixed
To mitigate this vulnerability, one should never trust user input for file or directory operations. The following steps could be taken to fix the flaw:

1. **Sanitize Input:** Ensure that the `planetName` parameter is strictly validated against a known list of acceptable values or patterns. Any request not matching the expected pattern should be rejected.

2. **Use a Whitelist:** Maintain a whitelist of allowed file names or paths. Only proceed with file operations if the requested resource matches an entry in the whitelist.

3. **Limit File Access:** Restrict file access to only the intended directory by resolving the absolute path and verifying it's within the expected boundary. Libraries such as `path.resolve` and functions to check the directory can ensure that the path after resolution remains within the designated area.

4. **Use Libraries for Secure File Access:** Consider using high-level libraries designed to handle file paths and names securely, taking care of various edge cases and encoding issues.

Implementing these preventative measures can significantly reduce the risk associated with CWE-73 and protect the application from potential exploitation.