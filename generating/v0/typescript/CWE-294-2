import express, { Request, Response } from 'express';
import bodyParser from 'body-parser';
import { Users } from './models/Users'; // Assume a Users model is available for DB operations

const app = express();
const port = 3000;

app.use(bodyParser.json());

// Mock session Token
let sessionTokens: { [key: string]: string } = {};

app.post('/login', async (req: Request, res: Response) => {
    const { username, password } = req.body;

    try {
        const user = await Users.findOne({ where: { username: username, password: password } });

        if (user) {
            // In a real scenario, we would generate a unique token
            // However, here we are just using a concatenation for simplicity which can be easily replayed
            const token = `user-${user.id}-${new Date().getTime()}`;
            sessionTokens[token] = username;

            res.json({ message: "Login successful", token: token });
        } else {
            res.status(401).json({ message: "Invalid credentials" });
        }
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: "An error occurred" });
    }
});

app.get("/profile", (req: Request, res: Response) => {
    const token = req.headers.authorization;

    if (token && sessionTokens[token]) {
        // Retrieving user details without validating the freshness or the uniqueness of the token
        const username = sessionTokens[token];
        res.json({ message: "Profile data", username: username });
    } else {
        res.status(401).json({ message: "Unauthorized" });
    }
});

app.listen(port, () => {
    console.log(`Server running on port ${port}`);
});

/*"""DELIMITER
A virtual networking platform that randomly connects individuals for serendipitous encounters and conversations.