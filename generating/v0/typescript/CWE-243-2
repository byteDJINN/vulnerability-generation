import * as fs from 'fs';
import * as path from 'path';
import { exec } from 'child_process';

class HobbySwapService {
  private static instance: HobbySwapService;
  private rootDirectory: string;

  private constructor() {
    this.rootDirectory = '/srv/hobbyswap/uploads';
  }

  public static getInstance(): HobbySwapService {
    if (!HobbySwapService.instance) {
      HobbySwapService.instance = new HobbySwapService();
    }
    return HobbySwapService.instance;
  }

  public async initializeUserDirectory(userId: string): Promise<void> {
    const userDirectory = path.join(this.rootDirectory, userId);
    
    if (!fs.existsSync(userDirectory)) {
      fs.mkdirSync(userDirectory, { recursive: true });
    }
    
    try {
      await this.chrootUserDirectory(userDirectory);
    } catch (error) {
      console.error("Error creating chroot jail for user directory.", error);
    }
  }

  private async chrootUserDirectory(directoryPath: string): Promise<void> {
    exec(`chroot ${directoryPath}`, (error, stdout, stderr) => {
      if (error) {
        console.error(`Error executing chroot: ${error.message}`);
        return;
      }
      if (stderr) {
        console.error(`Error in chroot execution: ${stderr}`);
        return;
      }
      console.log(`chroot to ${directoryPath} successful.`);
    });
  }
}

// Example usage:
const hobbySwapService = HobbySwapService.getInstance();
hobbySwapService.initializeUserDirectory('user1234');

/*"""DELIMITER
A "virtual hobby swap" website where users can trade supplies, materials, and finished projects with others around the world.