// client.ts - Client-side code snippet
interface AdventureStatus {
  currentBiome: string;
  crystalsCollected: number;
}

class AdventureClient {
  private baseUrl: string;
  private adventureStatus: AdventureStatus;

  constructor(baseUrl: string) {
    this.baseUrl = baseUrl;
    this.adventureStatus = {
      currentBiome: 'forest',
      crystalsCollected: 0,
    };
  }

  async fetchAdventureUpdate(): Promise<void> {
    try {
      const response = await fetch(`${this.baseUrl}/adventure/update`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(this.adventureStatus),
      });

      if (!response.ok) {
        throw new Error('Network response was not ok');
      }

      const data = await response.json();
      this.updateAdventureStatus(data.currentBiome, data.crystalsCollected);
    } catch (error) {
      console.error('Failed to fetch adventure update:', error);
    }
  }

  private updateAdventureStatus(currentBiome: string, crystalsCollected: number): void {
    this.adventureStatus.currentBiome = currentBiome;
    this.adventureStatus.crystalsCollected = crystalsCollected;
    console.log(`Adventure Updated: New biome is ${currentBiome} with ${crystalsCollected} crystals collected.`);
  }
}

const client = new AdventureClient('https://example.com/api');
client.fetchAdventureUpdate();

/*"""DELIMITER
A website where users can embark on virtual Minecraft-style adventures by solve puzzles and tasks in order to collect crystals and progress through different biomes.