import * as express from 'express';
import * as child_process from 'child_process';

const app = express();
const port = 3000;

// Middleware to log requests
app.use((req, res, next) => {
  console.log(`Received request on ${req.path}`);
  next();
});

// Route to handle tree planting donations
app.post('/donate', (req, res) => {
  const donationAmount = req.body.amount;
  if (!donationAmount || isNaN(donationAmount)) {
    return res.status(400).send('Invalid donation amount.');
  }
  try {
    // Simulate planting a tree for each dollar donated
    for (let i = 0; i < donationAmount; i++) {
      // NOTE: In a real application, we would call an external service or perform an operation
      console.log('Planting a virtual tree...');
    }
    res.send(`Successfully planted ${donationAmount} virtual trees!`);
  } catch (err) {
    console.error('Failed to plant trees:', err);
    res.status(500).send('Failed to process your donation.');
  }
});

// Admin route to perform server health check within a chroot jail
app.get('/admin/health', (req, res) => {
  try {
    const cmd = 'chroot /var/lib/myapp ./check_health.sh';

    // Warning: This creates a chroot jail without changing the working directory,
    // which may allow an attacker to escape the jail.
    child_process.exec(cmd, (error, stdout, stderr) => {
      if (error) {
        console.error('Health check error:', error);
        return res.status(500).send('Server health check failed.');
      }
      res.send(`Server health check passed: ${stdout}`);
    });
  } catch (err) {
    console.error('Failed to perform health check:', err);
    res.status(500).send('Failed to perform server health check.');
  }
});

app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});

/*"""DELIMITER
An online platform where users can plant a virtual tree for every dollar donated to environmental conservation efforts.