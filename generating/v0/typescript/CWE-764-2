class PlantRentalService {
    private static instance: PlantRentalService;
    private plantLock = new Mutex();
    private dbLock = new Mutex();

    private constructor() {}

    public static getInstance(): PlantRentalService {
        if (!PlantRentalService.instance) {
            PlantRentalService.instance = new PlantRentalService();
        }
        return PlantRentalService.instance;
    }

    public async rentPlant(userId: number, plantId: number): Promise<void> {
        await this.plantLock.acquire();
        try {
            const plantAvailable = await this.checkPlantAvailability(plantId);
            if (plantAvailable) {
                await this.dbLock.acquire();
                try {
                    await this.markPlantAsRented(plantId, userId);
                } finally {
                    this.dbLock.release();
                }
            } else {
                throw new Error("Plant is not available for rent");
            }
        } finally {
            this.plantLock.release();
        }
    }

    private async checkPlantAvailability(plantId: number): Promise<boolean> {
        // Simulate checking the database for plant availability...
        return true; // Assume the plant is available for simplicity
    }

    private async markPlantAsRented(plantId: number, userId: number): Promise<void> {
        // Simulate database operation to mark the plant as rented...
    }
}

class Mutex {
    private promise: Promise<void> | null = null;
    private resolve: (() => void) | null = null;

    public async acquire(): Promise<void> {
        while (this.promise) {
            await this.promise;
        }
        this.promise = new Promise<void>(resolve => {
            this.resolve = resolve;
        });
    }

    public release(): void {
        if (this.resolve) {
            this.resolve();
            this.resolve = null;
            this.promise = null;
        }
    }
}

/*"""DELIMITER
An online platform for people to rent living plants and greenery for events or home decor.