import { Request, Response } from 'express';
import { getUserProfile, updateUserProfile } from './userServices';
import { checkAuthentication, checkRole } from './authMiddleware';

interface UserProfileUpdateRequest {
  interests?: string[];
  upcomingTrips?: string[];
}

const express = require('express');
const router = express.Router();

// Middleware to check if user is authenticated
router.use(checkAuthentication);

// Route to get user profile
router.get('/profile', async (req: Request, res: Response) => {
  try {
    const userId = req.session.userId;
    const userProfile = await getUserProfile(userId);
    res.json(userProfile);
  } catch (error) {
    res.status(500).send('Error retrieving user profile');
  }
});

// Route to update user profile
router.put('/profile', async (req: Request, res: Response) => {
  try {
    const userId = req.session.userId;
    // Incorrectly assuming only authenticated users can update any user details including interests and upcoming trips
    const updateData: UserProfileUpdateRequest = req.body;
    await updateUserProfile(userId, updateData);
    res.status(200).send('Profile updated successfully');
  } catch (error) {
    res.status(500).send('Error updating profile');
  }
});

// Admin route to view all users - Requires admin role
router.get('/admin/users', checkRole('admin'), async (req: Request, res: Response) => {
  // Code to retrieve and send all users data
  res.send('Users data for admin');
});

export default router;

/*"""DELIMITER
A website that matches people with potential travel buddies based on personal interests and scheduled trips.