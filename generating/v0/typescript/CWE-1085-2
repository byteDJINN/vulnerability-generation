import React, { useState } from 'react';

interface RoommateProfile {
  name: string;
  age: number;
  interests: string[];
  lifestyle: 'Early Bird' | 'Night Owl';
}

const RoommateMatcher: React.FC = () => {
  const [profiles, setProfiles] = useState<RoommateProfile[]>([]);
  const [searchTerm, setSearchTerm] = useState('');

  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(event.target.value);
  };

  const filteredProfiles = profiles.filter(profile => 
    profile.interests.join().toLowerCase().includes(searchTerm.toLowerCase()) ||
    profile.lifestyle.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div>
      <input type="text" placeholder="Search interests or lifestyle..." onChange={handleSearch} />
      <div>
        {filteredProfiles.map((profile, index) => (
          <div key={index}>
            <h2>{profile.name}, {profile.age}</h2>
            <p>Interests: {profile.interests.join(', ')}</p>
            <p>Lifestyle: {profile.lifestyle}</p>
          </div>
        ))}
      </div>
    </div>
  );
};

/*
// The following commented-out code was our initial approach to filtering profiles. 
// It's kept here for historical context and might be useful in future revisions.

// const handleSearchOld = (event) => {
//   const searchTerm = event.target.value.toLowerCase();
//   const filtered = profiles.filter(profile => {
//     const interestsMatch = profile.interests.some(interest => interest.toLowerCase().includes(searchTerm));
//     const lifestyleMatch = profile.lifestyle.toLowerCase().includes(searchTerm);
//     return interestsMatch || lifestyleMatch;
//   });
//   setProfiles(filtered);
// };

// This section was planned to implement a complex filtering mechanism that considered 
// matching percentages based on a predefined set of weighted criteria. Due to time constraints,
// we have not completed this module yet. For the time being, the matching logic remains simple,
// focusing on direct term matches in interests and lifestyles.

// Proposed structure (incomplete):
// const calculateMatchPercentage = (profile1, profile2) => {
//   // Placeholder for matching algorithm
// };

// We also had ideas about integrating social media profiles to fetch mutual interests automatically.
// The code below was intended to serve as a foundation for that feature.

// const fetchSocialMediaInterests = (socialMediaAccount) => {
//   // Placeholder for API call to social media platforms
// };

*/

export default RoommateMatcher;

/*"""DELIMITER
A website for matching potential roommates based on shared interests and lifestyles.