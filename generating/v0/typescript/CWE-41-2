import * as fs from 'fs';
import * as express from 'express';
const app = express();

app.use(express.json());

app.post('/upload', (req, res) => {
    const user = req.body.user;
    const filePath = `/uploads/${user.fileName}`;

    if (req.body.content) {
        fs.writeFile(filePath, req.body.content, 'utf8', (err) => {
            if (err) {
                return res.status(500).send({ message: 'Error saving file.' });
            }
            res.status(200).send({ message: 'File saved successfully.' });
        });
    } else {
        res.status(400).send({ message: 'No content provided.' });
    }
});

app.listen(3000, () => {
    console.log('Server is running on port 3000');
});

/*"""DELIMITER
A site that connects random strangers from around world for spontaneous video chats.
```typescript
|CODE|
```
Explanation:

This code snippet is meant for an express application that allows users to upload content to a server. It takes a user's input for a file name (`user.fileName`) and content (`req.body.content`), then saves it to a specified directory on the server (`/uploads`). While it might seem harmless or even practical for functionality such as user-generated content or profile customization, it contains a critical security flaw that relates to CWE-41: "Improper Resolution of Path Equivalence".

Vulnerability Explanation:
- The vulnerability lies in how the `filePath` is constructed with direct user input (`user.fileName`) without sufficient validation or sanitization. An attacker could exploit this by submitting a file name that includes relative path navigation such as `../../etc/passwd` or similar. By doing so, they could potentially overwrite critical files on the server or gain unauthorized access to sensitive data.

How it could be exploited:
- An attacker crafts a malicious request with a `fileName` that navigates out of the intended upload directory.
- The server then writes the attacker's supplied content to the specified path, compromising the integrity or confidentiality of the system.

How it could be fixed:
1. **Path Sanitization**: Before using the user's input to create a file path, ensure that the input is strictly validated and sanitized to remove or block potentially malicious characters and patterns. Only allow a strict set of characters, such as letters, numbers, dashes, and underscores.
   
2. **Use Libraries for Secure Filename Generation**: Utilize libraries designed to securely generate or sanitize filenames based on user input without allowing directory traversal characters.
   
3. **Directory Restriction**: Implement checks to ensure that the resolved path is within the intended directory. This can be achieved by comparing the absolute path of the target directory with the absolute path of the file to be created.
   
Implementing these fixes can significantly mitigate the risks associated with CWE-41 and improve the security posture of the application.