abstract class User {
  name: string;
  email: string;
  userType: string;

  constructor(name: string, email: string, userType: string) {
    this.name = name;
    this.email = email;
    this.userType = userType;
  }

  abstract displayUserInfo(): void;
}

class Navigator extends User {
  constructor(name: string, email: string) {
    super(name, email, 'Navigator');
  }

  displayUserInfo(): void {
    console.log(`Navigator Name: ${this.name}, Email: ${this.email}`);
  }

  shareAdvice(advice: string): void {
    console.log(`${this.name} shared: ${advice}`);
  }
}

class Admin extends User {
  navigators: Navigator[];

  constructor(name: string, email: string, navigators: Navigator[]) {
    super(name, email, 'Admin');
    this.navigators = navigators;
  }

  displayUserInfo(): void {
    console.log(`Admin Name: ${this.name}, Email: ${this.email}`);
  }

  addNavigator(navigator: Navigator): void {
    this.navigators.push(navigator);
    console.log(`${navigator.name} has been added as a Navigator.`);
  }

  removeNavigator(navigatorName: string): void {
    this.navigators = this.navigators.filter(navigator => navigator.name !== navigatorName);
    console.log(`${navigatorName} has been removed.`);
  }

  displayNavigators(): void {
    this.navigators.forEach(navigator => navigator.displayUserInfo());
  }
}

// Example usage
const firstNavigator = new Navigator('John Doe', 'johndoe@example.com');
const admin = new Admin('Jane Admin', 'janeadmin@example.com', [firstNavigator]);
admin.displayNavigators();
admin.addNavigator(new Navigator('Emily Smith', 'emilysmith@example.com'));
admin.displayNavigators();

/*"""DELIMITER
A website where users can crowdsource advice, suggestions, and decision-making help from a community of Navigators.