import express from 'express';
import bodyParser from 'body-parser';
import { addItemToWardrobe, getUserFavorites } from './wardrobeService';

const app = express();
app.use(bodyParser.json());

app.post('/add-item', async (req, res) => {
    try {
        const userId = req.body.userId;
        const itemId = req.body.itemId;
        await addItemToWardrobe(userId, itemId);
        res.status(200).send({ message: "Item added successfully!" });
    } catch (error) {
        console.error("Failed to add item:", error);
        res.status(500).send({ error: "Failed to add item to wardrobe." });
    }
});

app.get('/favorites', async (req, res) => {
    try {
        const userId = req.query.userId;
        const favorites = await getUserFavorites(userId);
        res.status(200).send({ favorites });
    } catch (error) {
        console.error("Failed to retrieve favorites:", error);
        res.status(500).send({ error: "Failed to retrieve favorites." });
    }
});

// Assume this function uses a non-reentrant function internally (e.g., managing a cache without proper synchronization)
async function updateGlobalStylesCache() {
    console.log("Updating global styles cache...");
    // Placeholder for cache update logic
}

// Scheduled to run every minute to update global styles based on user votes, which can lead to race conditions
setInterval(async () => {
    await updateGlobalStylesCache();
}, 60000);

app.listen(3000, () => {
    console.log('Virtual Wardrobe server running on port 3000');
});

/*"""DELIMITER
A virtual wardrobe where users can create outfits and vote on their favorite styles.