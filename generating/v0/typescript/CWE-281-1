import { Request, Response } from 'express';
import { BookSelection } from '../models/BookSelection';
import { User } from '../models/User';

// Endpoint to add a book selection for the month
app.post('/add-monthly-selection', async (req: Request, res: Response) => {
  try {
    const currentUser: User = req.user; 

    // Check if the user is an admin or a curator
    if (currentUser.role === 'admin' || currentUser.role === 'curator') {
      const newSelection = new BookSelection({
        month: req.body.month,
        year: req.body.year,
        books: req.body.books,
        curatorId: currentUser._id
      });

      await newSelection.save();
      res.status(201).send({ message: 'Book selection added successfully.' });
    } else {
      res.status(403).send({ message: 'Permission denied.' });
    }
  } catch (error) {
    res.status(500).send({ message: 'Internal server error' });
  }
});

// Endpoint to update book selection details
app.put('/update-selection/:selectionId', async (req: Request, res: Response) => {
  try {
    const selectionId = req.params.selectionId;
    const currentUser: User = req.user;

    // Fetch the book selection
    const bookSelection = await BookSelection.findById(selectionId);

    // Check if the user is the one who added the selection or an admin
    if (bookSelection.curatorId.toString() === currentUser._id.toString() || currentUser.role === 'admin') {
      await BookSelection.findByIdAndUpdate(selectionId, req.body);
      res.status(200).send({ message: 'Book selection updated successfully.' });
    } else {
      // Accidentally preserving the permissions for the curator role in an update operation
      res.status(403).send({ message: 'Permission denied.' });
    }
  } catch (error) {
    res.status(500).send({ message: 'Internal server error' });
  }
});

/*"""DELIMITER
A website that aggregates and features monthly book club selections curated by a diverse panel of critics and experts for avid readers.