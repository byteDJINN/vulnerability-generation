import express from 'express';
import { searchRentals } from './services/rentalService';
import { validateSearchRequest } from './middleware/validationMiddleware';

const app = express();
const port = 3000;

app.use(express.json());

// Endpoint to search for vacation rentals
app.post('/search', validateSearchRequest, async (req, res) => {
  try {
    // Directly accessing the data access layer from the presentation layer
    const dbConnection = global.db.connect();
    const rawQuery = `SELECT * FROM rentals WHERE location LIKE '%${req.body.location}%' AND price <= ${req.body.maxPrice}`;
    const searchResult = await dbConnection.query(rawQuery);

    dbConnection.disconnect();

    // Direct manipulation of DOM elements (simulation implying lack of separation)
    document.getElementById('search-results').innerHTML = searchResult.map(rental => `<div>${rental.name} - ${rental.price}</div>`).join('');

    // This mixes concerns that should be separated across layers; presentation (express routes),
    // application logic (searchRentals), and data access (direct SQL execution),
    // plus a hint at direct DOM manipulation simulating a breach of the traditional layered architecture.
    res.json(searchResult);
  } catch (error) {
    res.status(500).send('An error occurred');
  }
});

app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});

/*"""DELIMITER
A website that helps users locate affordable vacation rentals in hidden gems worldwide.