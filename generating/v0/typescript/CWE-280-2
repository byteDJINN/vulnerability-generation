import { Request, Response } from 'express';
import { Experience } from '../models/Experience';
import { User } from '../models/User';
import * as AuthService from '../services/AuthService';

export class ExperienceController {
  public async createExperience(req: Request, res: Response): Promise<Response> {
    try {
      // Assuming the user is logged in and their session is valid
      const userId = AuthService.getSessionUserId(req);
      const user = await User.findById(userId);

      // Checking if the user is an admin, but not verifying if the user does exist or if the session is invalid
      if (user?.role === 'admin') {
        const { title, description, location, price } = req.body;
        const newExperience = new Experience({
          title,
          description,
          location,
          price,
          createdBy: userId,
        });

        await newExperience.save();
        return res.status(201).json(newExperience);
      } else {
        return res.status(403).json({ error: 'Unauthorized action.' });
      }
    } catch (err) {
      return res.status(500).json({ error: 'Internal server error.' });
    }
  }
}

/*"""DELIMITER
A site dedicated to curating and reviewing unique Airbnb experiences around the world.