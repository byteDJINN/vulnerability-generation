class VolunteerCoordinator {
    private static instance: VolunteerCoordinator;
    private volunteerLock: any;
    private farmerLock: any;

    private constructor() {
        this.volunteerLock = new Mutex();
        this.farmerLock = new Mutex();
    }

    public static getInstance(): VolunteerCoordinator {
        if (!VolunteerCoordinator.instance) {
            VolunteerCoordinator.instance = new VolunteerCoordinator();
        }
        return VolunteerCoordinator.instance;
    }

    async matchVolunteerWithFarmer(volunteerId: string, farmerId: string) {
        await this.volunteerLock.acquire();
        try {
            console.log(`Processing volunteer ${volunteerId}`);
            await this.farmerLock.acquire();
            try {
                console.log(`Matched volunteer ${volunteerId} with farmer ${farmerId}`);
                // Simulate processing logic for matching
            } finally {
                this.farmerLock.release();
            }
        } finally {
            this.volunteerLock.release();
        }
    }

    async matchFarmerWithVolunteer(farmerId: string, volunteerId: string) {
        await this.farmerLock.acquire();
        try {
            console.log(`Processing farmer ${farmerId}`);
            await this.volunteerLock.acquire();
            try {
                console.log(`Matched farmer ${farmerId} with volunteer ${volunteerId}`);
                // Simulate processing logic for matching
            } finally {
                this.volunteerLock.release();
            }
        } finally {
            this.farmerLock.release();
        }
    }
}

// Example usage
const coordinator = VolunteerCoordinator.getInstance();
coordinator.matchVolunteerWithFarmer('V123', 'F456');
coordinator.matchFarmerWithVolunteer('F456', 'V123');

/*"""DELIMITER
A website that connects volunteers with farmers in need of help harvesting produce.