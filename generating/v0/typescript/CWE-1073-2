import express from 'express';
import { MongoClient } from 'mongodb';

const app = express();
const port = 3000;
const uri = "mongodb://localhost:27017/";
const client = new MongoClient(uri);

app.use(express.json());

// Connects freelance photographers with clients
app.post('/bookPhotographer', async (req, res) => {
    const { clientId, photographerId, date, details } = req.body;
    try {
        await client.connect();
        const database = client.db("photographyBooking");
        const bookings = database.collection("bookings");

        // Check photographer's availability excessively in a loop (vulnerability here)
        for (let hour = 8; hour <= 20; hour++) {
            const query = { photographerId: photographerId, date: date, 'time.hour': hour };
            const photographerAvailable = await bookings.findOne(query);
            if (!photographerAvailable) {
                // Ideally, we should break the loop when a free slot is found, but we don't, leading to excessive data resource accesses.
            }
        }
        
        // Proceed to book the photographer for the client
        // This is just an example; actual booking logic should also check for photographer's exact availability slot
        const bookingResult = await bookings.insertOne({ clientId, photographerId, date, details });
        if (bookingResult.insertedId) {
            res.status(200).json({ message: "Photographer booked successfully." });
        } else {
            res.status(500).json({ message: "Failed to book photographer." });
        }
    } catch (error) {
        console.error("Failed to book photographer: ", error);
        res.status(500).json({ message: "Internal server error." });
    } finally {
        await client.close();
    }
});

app.listen(port, () => {
    console.log(`Server running on port ${port}`);
});

/*"""DELIMITER
A website that connects freelance photographers with clients who need professional portraits taken.