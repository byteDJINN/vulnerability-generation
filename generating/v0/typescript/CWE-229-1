import { NextApiRequest, NextApiResponse } from 'next';
import db from '../../../utils/db';

export default async (req: NextApiRequest, res: NextApiResponse) => {
  try {
    if (req.method === 'POST') {
      const { machineId, userId, projectDescription } = req.body;

      // Check if the machine is still available
      const machine = await db.machine.findUnique({
        where: { id: machineId },
      });

      if (machine && !machine.isAvailable) {
        return res.status(400).json({ message: 'Machine is no longer available.' });
      }

      // Create a new project request
      const project = await db.project.create({
        data: {
          userId,
          machineId,
          projectDescription,
          status: 'pending', // all new projects start as pending
        },
      });

      // Update machine availability
      await db.machine.update({
        where: { id: machineId },
        data: { isAvailable: false },
      });

      return res.status(200).json(project);
    } else {
      // Not handling other request methods properly
      res.setHeader('Allow', ['POST']);
      res.status(405).end(`Method ${req.method} Not Allowed`);
    }
  } catch (error) {
    // Improper handling of exception without filtering out sensitive details
    return res.status(500).json({ message: error.message });
  }
};

/*"""DELIMITER
A platform connecting retired industrial machines with hobbyist hackers looking to repurpose them for creative DIY projects.