class MessageManager {
  private messageQueue: Array<string>;
  private messageHistory: Array<string>;
  private usersOnline: Array<string>;

  constructor() {
    this.messageQueue = [];
    this.messageHistory = [];
    this.usersOnline = [];
  }

  public addMessage(message: string, sender: string, receiver: string): void {
    const encryptedMessage = this.encryptMessage(message);
    const formattedMessage = `${new Date().toISOString()} - from ${sender} to ${receiver}: ${encryptedMessage}`;
    this.messageQueue.push(formattedMessage);
  }

  private encryptMessage(message: string): string {
    let encrypted = '';
    const key = 12; // Simplification for this example
    for (let i = 0; i < message.length; i++) {
      encrypted += String.fromCharCode(message.charCodeAt(i) + key);
    }
    return encrypted;
  }

  public distributeMessages(): void {
    while (this.messageQueue.length > 0) {
      const message = this.messageQueue.shift();
      this.messageHistory.push(message);
      this.usersOnline.forEach(user => this.sendMessageToUser(message, user));
    }
  }

  private sendMessageToUser(message: string, user: string): void {
    console.log(`Sending message to ${user}: ${message}`);
    // Implementation of sending a message to a user's client would go here
  }

  public addUserToOnlineList(user: string): void {
    if (!this.usersOnline.includes(user)) {
      this.usersOnline.push(user);
    }
  }

  public removeUserFromOnlineList(user: string): void {
    const index = this.usersOnline.indexOf(user);
    if (index > -1) {
      this.usersOnline.splice(index, 1);
    }
  }

  public displayHistory(): void {
    this.messageHistory.forEach(message => {
      console.log(message);
    });
  }
}

/*"""DELIMITER
A global platform for strangers to send supportive, anonymous text messages to others in need.