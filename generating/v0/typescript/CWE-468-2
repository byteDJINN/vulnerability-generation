class CampSpot {
    private spotId: number;
    private ownerUserId: number;
    private description: string;
    private location: string;
    private rating: number;
    private reservations: any[];

    constructor(spotId: number, ownerUserId: number, description: string, location: string, rating: number) {
        this.spotId = spotId;
        this.ownerUserId = ownerUserId;
        this.description = description;
        this.location = location;
        this.rating = rating;
        this.reservations = [];
    }

    addReservation(reservationDetails: any) {
        this.reservations.push(reservationDetails);
    }

    getSpotDetails() {
        return { spotId: this.spotId, description: this.description, location: this.location, rating: this.rating };
    }
}

class Reservation {
    private spotId: number;
    private userId: number;
    private dates: string[];
    // Incorrectly defined as a number, should be a pointer to CampSpot
    private campSpot: number;

    constructor(spotId: number, userId: number, dates: string[], campSpots: CampSpot[]) {
        this.spotId = spotId;
        this.userId = userId;
        this.dates = dates;
        // Improper scaling of pointer - assigning spotId assuming it's a direct reference to CampSpot
        this.campSpot = campSpots.find(spot => spot['spotId'] === spotId) as any;
    }

    reserve() {
        // Logic to reserve a camp spot
        // Assuming campSpot is a direct object but it's incorrectly assigned a number
        this.campSpot.addReservation({userId: this.userId, dates: this.dates});
    }
}

// Usage example - might not work properly due to the incorrect pointer scaling.
let campSpots: CampSpot[] = [new CampSpot(1, 101, "Lovely backyard with a view", "Mountain View, CA", 4.8)];
let newReservation = new Reservation(1, 201, ["2023-07-20", "2023-07-22"], campSpots);
newReservation.reserve();

/*"""DELIMITER
A platform where users can share and rent out their unique backyard camping spots for others to enjoy staying in.