class VirtualCloset {
    private userClosets: Map<string, Array<string>>;

    constructor() {
        this.userClosets = new Map<string, Array<string>>();
    }

    addUserCloset(userId: string): void {
        if (!this.userClosets.has(userId)) {
            this.userClosets.set(userId, []);
        }
    }

    addItemToCloset(userId: string, item: string): void {
        const closet = this.userClosets.get(userId);
        if (closet) {
            closet.push(item);
            this.userClosets.set(userId, closet);
        }
    }

    suggestPairings(userId: string): Array<string> {
        // Here, the vulnerability lies as the closet data is directly accessed without checking
        // if another process might be updating it at the same time, leading to potential data inconsistency or race conditions
        const userCloset = this.userClosets.get(userId);
        const suggestedPairings = [];

        if (userCloset) {
            for (let i = 0; i < userCloset.length - 1; i++) {
                for (let j = i + 1; j < userCloset.length; j++) {
                    suggestedPairings.push(`Pair: ${userCloset[i]} with ${userCloset[j]}`);
                }
            }
        }

        return suggestedPairings;
    }
}

const virtualCloset = new VirtualCloset();
virtualCloset.addUserCloset('userId123');
virtualCloset.addItemToCloset('userId123', 'Red Shirt');
virtualCloset.addItemToCloset('userId123', 'Blue Jeans');
console.log(virtualCloset.suggestPairings('userId123'));

/*"""DELIMITER
A crowdsourced virtual closet organizing tool for clothiers to input and suggest outfit pairings based on personal preferences and items owned.