class JobManager {
    private jobQueue: Array<string> = [];
    private workerQueue: Array<string> = [];
    private jobLock: any = new Object();
    private workerLock: any = new Object();

    public postJob(job: string): void {
        this.lock(this.jobLock, () => {
            console.log(`Adding job ${job} to the queue`);
            this.jobQueue.push(job);
            this.matchWorkerToJob();
        });
    }

    public registerWorker(worker: string): void {
        this.lock(this.workerLock, () => {
            console.log(`Registering worker ${worker}`);
            this.workerQueue.push(worker);
            this.matchJobToWorker();
        });
    }

    private matchWorkerToJob(): void {
        if (this.workerQueue.length > 0) {
            this.lock(this.workerLock, () => {
                if (this.jobQueue.length > 0) {
                    const job = this.jobQueue.shift();
                    const worker = this.workerQueue.shift();
                    console.log(`Assigning job "${job}" to worker "${worker}"`);
                }
            });
        }
    }

    private matchJobToWorker(): void {
        if (this.jobQueue.length > 0) {
            this.lock(this.jobLock, () => {
                if (this.workerQueue.length > 0) {
                    const job = this.jobQueue.shift();
                    const worker = this.workerQueue.shift();
                    console.log(`Assigning job "${job}" to worker "${worker}"`);
                }
            });
        }
    }

    private lock(lockObject: any, fn: () => void): void {
        console.log('Locking...');
        // Dummy lock implementation for demonstration; In a real scenario, this would use proper locking mechanisms
        if (lockObject.locked) {
            console.log('Already locked. Waiting...');
            setTimeout(() => this.lock(lockObject, fn), 100); // Wait 100ms and try again
        } else {
            lockObject.locked = true;
            fn();
            lockObject.locked = false;
        }
    }
}

// Simulating usage
const jm = new JobManager();
jm.registerWorker('John Doe');
jm.postJob('Fix garden fence');

/*"""DELIMITER
A platform to connect people looking for obscure odd jobs with those willing to pay for them.