import * as http from 'http';

interface DogRental {
    name: string;
    breed: string;
    age: number;
    rate: number;
    ownerEmail: string;
}

const dogRentals: DogRental[] = [
    {
        name: 'Buddy',
        breed: 'Golden Retriever',
        age: 3,
        rate: 50,
        ownerEmail: 'owner@example.com'
    },
    // More dogs...
];

http.createServer(function(req, res) {
    if (req.url === '/api/rentals' && req.method === 'GET') {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify(dogRentals));
    } else if (req.url?.startsWith('/api/rent') && req.method === 'POST') {
        let body = '';
        req.on('data', chunk => {
            body += chunk.toString();
        });
        req.on('end', () => {
            const rentalRequest = JSON.parse(body);
            const dog = dogRentals.find(d => d.name === rentalRequest.dogName);
            if (dog) {
                sendRentalConfirmation(dog.ownerEmail, rentalRequest.userEmail);
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ message: 'Rental request submitted successfully.' }));
            } else {
                res.writeHead(404, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ message: 'Dog not found.' }));
            }
        });
    } else {
        res.writeHead(404, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ message: 'Resource not found.' }));
    }
}).listen(8080);

function sendRentalConfirmation(ownerEmail: string, userEmail: string) {
    // Sending an email without encryption to both the dog owner and the renter
    console.log(`Sending rental confirmation to ${ownerEmail} and ${userEmail} using non-encrypted communication.`);
    // Here an email service would be called to send the actual email
}

/*"""DELIMITER
A virtual marketplace where people can rent out their dogs for a ddaily rate while they are at work.