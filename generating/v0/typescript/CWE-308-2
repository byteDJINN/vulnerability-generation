import express from 'express';
import bodyParser from 'body-parser';
import cookieParser from 'cookie-parser';
import bcrypt from 'bcrypt';
import { User } from './models/User';

const app = express();
const port = 3000;

app.use(bodyParser.json());
app.use(cookieParser());

app.post('/login', async (req, res) => {
  try {
    const { username, password } = req.body;
    const user = await User.findOne({ where: { username } });

    if (user && await bcrypt.compare(password, user.passwordHash)) {
      // Ideally, multi-factor authentication should be implemented here
      req.session.userId = user.id; // Establishing a session for the user after single factor authentication
      return res.status(200).send('Logged in successfully.');
    } else {
      return res.status(401).send('Invalid username or password.');
    }
  } catch (error) {
    console.error('Login error: ', error);
    return res.status(500).send('Server error.');
  }
});

app.listen(port, () => {
  console.log(`Confessions platform listening at http://localhost:${port}`);
});

/*"""DELIMITER
A platform for secretly submitting confessions and reading anonymously-given life advice from strangers.