// TypeScript code snippet for volunteering matching website

interface VolunteerOpportunity {
    id: number;
    title: string;
    description: string;
    skillsRequired: string[];
}

class VolunteerService {
    private static instance: VolunteerService;
    private constructor() {}
    static getInstance(): VolunteerService {
        if (!VolunteerService.instance) {
            VolunteerService.instance = new VolunteerService();
        }
        return VolunteerService.instance;
    }

    searchOpportunities(skill: string): VolunteerOpportunity[] {
        // Simulated database call to fetch volunteering opportunities
        const opportunities: VolunteerOpportunity[] = [
            { id: 1, title: "Park Cleanup", description: "Help clean up the local park.", skillsRequired: ["organizing", "manual labor"] },
            { id: 2, title: "Coding Tutor", description: "Teach coding to kids at the community center.", skillsRequired: ["programming", "patience"] },
            // ... other opportunities
        ];
        return opportunities.filter(opportunity => opportunity.skillsRequired.includes(skill));
    }
}

class VolunteerController {
    private volunteerService: VolunteerService;

    constructor() {
        this.volunteerService = VolunteerService.getInstance();
    }

    getOpportunitiesBySkill(req: any, res: any) {
        const skill: string = req.query.skill;
        try {
            const matchedOpportunities = this.volunteerService.searchOpportunities(skill);
            res.status(200).json(matchedOpportunities);
        } catch (error) {
            res.status(500).send("Error fetching volunteering opportunities");
        }
    }
}

// Express setup (simplified)
const express = require('express');
const app = express();
const volunteerController = new VolunteerController();

// Vulnerability arises here: The same control logic is directly accessible at multiple layers (API and direct method call)
app.get('/api/opportunities', (req, res) => volunteerController.getOpportunitiesBySkill(req, res));

// Assume direct access for scripting or admin purposes, bypassing typical API usage
const directUsageExample = () => {
    const sampleSkill = "programming";
    const directResults = volunteerController.getOpportunitiesBySkill({ query: { skill: sampleSkill } }, console.log);
    console.log(directResults);
};

app.listen(3000, () => console.log('Volunteer matching server running on port 3000'));

/*"""DELIMITER
A website that matches volunteering opportunities with individuals based on their interests and skills.