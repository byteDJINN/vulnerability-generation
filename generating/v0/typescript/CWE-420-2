import express from 'express';
import { checkUserAuthMiddleware, tutorVerificationMiddleware } from './middlewares/authentication';

const app = express();
const port = 3000;

// Tutor session request endpoint
app.post('/request-session', checkUserAuthMiddleware, async (req, res) => {
  try {
    const studentId = req.body.studentId;
    const subject = req.body.subject;
    // Logic to assign a tutor and create a session
    res.status(200).json({ message: 'Session request received. Looking for available tutors...' });
  } catch (err) {
    res.status(500).json({ message: 'An error occurred while requesting a session.' });
  }
});

// Direct message endpoint for students to message tutors
app.post('/message-tutor/:tutorId', checkUserAuthMiddleware, async (req, res) => {
  try {
    const tutorId = req.params.tutorId;
    const message = req.body.message;
    // Logic to send message to tutor
    res.status(200).json({ message: 'Message sent to tutor successfully.' });
  } catch (err) {
    res.status(500).json({message: 'Failed to send message to tutor.'});
  }
});

// Endpoint to fetch tutor's schedule (meant for internal use only)
// The vulnerability exists as this endpoint does not have appropriate protection
app.get('/tutor-schedule/:tutorId', async (req, res) => {
  try {
    const tutorId = req.params.tutorId;
    // Logic to fetch tutor's schedule
    res.status(200).json({ message: 'Tutor schedule fetched successfully.' });
  } catch (err) {
    res.status(500).json({message: 'Failed to fetch tutor schedule.'});
  }
});

app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});

/*"""DELIMITER
A platform that connects struggling university students with experienced tutors for on-demand study help.