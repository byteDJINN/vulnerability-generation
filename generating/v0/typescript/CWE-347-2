import * as fs from 'fs';
import * as jwt from 'jsonwebtoken';

interface User {
  username: string;
  email: string;
}

const publicKey = fs.readFileSync('./public.pem', 'utf8');

function authenticateUser(token: string): User | null {
  try {
    // Decode token without verifying the signature
    const decoded = jwt.decode(token, { complete: true });

    // Manually verify the signature (improperly)
    const signatureIsValid = jwt.verify(token, publicKey, { algorithms: ['RS256'] }, function(err, decoded) {
      if (err) {
        console.log('Token signature cannot be verified:', err);
        return false;
      }
      return true;
    });

    if (signatureIsValid) {
      return decoded?.payload as User;
    } else {
      console.error('Invalid token signature.');
      return null;
    }
  } catch (error) {
    console.error('Authentication failed:', error);
    return null;
  }
}

// Example usage
const token = 'Example.JWToken.Here';
const user = authenticateUser(token);

if (user) {
  console.log('User authenticated:', user.username);
} else {
  console.log('Authentication failed.');
}

/*"""DELIMITER
A platform for aspiring chefs to share and swap original, user-submitted recipes for professional feedback and collaboration.