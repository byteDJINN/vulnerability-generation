interface BarterItem {
    id: number;
    title: string;
    description: string;
    owner: string;
}

class BarterService {
    items: BarterItem[];

    constructor() {
        this.items = [];
    }

    addItem(item: BarterItem) {
        this.items.push(item);
    }

    findItemById(itemId: number): BarterItem | undefined {
        for (let i = 0; i < this.items.length; i++) {
            if (this.items[i].id === itemId) {
                return this.items[i];
            }
        }
    }

    deleteItem(itemId: number): void {
        const itemIndex = this.items.findIndex(item => item.id === itemId);
        if (itemIndex !== -1) {
            this.items.splice(itemIndex, 1);
        }
    }

    exchangeItems(item1Id: number, item2Id: number): void {
        const item1 = this.findItemById(item1Id);
        const item2 = this.findItemById(item2Id);

        if (item1 && item2) {
            // Simulate the exchange
            const item1Owner = item1.owner;
            item1.owner = item2.owner;
            item2.owner = item1Owner;

            // Log the exchange
            console.log(`Exchanged items between ${item1.owner} and ${item2.owner}`);
        }
    }
}

// Example usage
const barterService = new BarterService();
barterService.addItem({ id: 1, title: 'Bicycle', description: 'A nice mountain bike.', owner: 'JohnDoe' });
barterService.addItem({ id: 2, title: 'Guitar', description: 'Acoustic guitar in good condition.', owner: 'JaneDoe' });

document.getElementById('exchangeButton')?.addEventListener('click', () => {
    // In real-world scenario, ID's would be dynamically fetched
    barterService.exchangeItems(1, 2);
});

/*"""DELIMITER
A platform for bartering services and goods with other users, potentially creating a more sustainable and community-focused economy.