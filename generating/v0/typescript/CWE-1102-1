class StrategyPost {
    title: string;
    description: string;
    datePosted: Date;
    strategyDiagram: ArrayBuffer;

    constructor(title: string, description: string, datePosted: Date, diagram: ArrayBuffer) {
        this.title = title;
        this.description = description;
        this.datePosted = datePosted;
        this.strategyDiagram = diagram;
    }

    static fromBinary(binaryData: ArrayBuffer): StrategyPost {
        const dataView = new DataView(binaryData);
        
        let titleLength = dataView.getUint8(0);
        let title = new TextDecoder().decode(binaryData.slice(1, 1 + titleLength));
        
        let descLengthPosition = 1 + titleLength;
        let descLength = dataView.getUint8(descLengthPosition);
        let description = new TextDecoder().decode(binaryData.slice(descLengthPosition + 1, descLengthPosition + 1 + descLength));
        
        let datePostedPosition = descLengthPosition + 1 + descLength;
        let year = dataView.getUint16(datePostedPosition);
        let month = dataView.getUint8(datePostedPosition + 2) - 1; // JavaScript months are 0-indexed
        let day = dataView.getUint8(datePostedPosition + 3);
        let datePosted = new Date(year, month, day);
        
        let diagramPosition = datePostedPosition + 4;
        let diagram = binaryData.slice(diagramPosition);

        return new StrategyPost(title, description, datePosted, diagram);
    }

    toBinary(): ArrayBuffer {
        // This method packs the StrategyPost data into a binary format,
        // which is machine-dependent due to varying endianess
        // and is therefore not recommended without careful consideration
        // of the data representation across different platforms.
        let encoder = new TextEncoder();
        let titleData = encoder.encode(this.title);
        let descriptionData = encoder.encode(this.description);
        
        let bufferSize = 1 + titleData.byteLength + 1 + descriptionData.byteLength + 2 + 1 + 1 + this.strategyDiagram.byteLength;
        let binaryData = new ArrayBuffer(bufferSize);
        let dataView = new DataView(binaryData);
        
        dataView.setUint8(0, titleData.byteLength);
        let currentPosition = 1;
        new Uint8Array(binaryData).set(titleData, currentPosition);
        currentPosition += titleData.byteLength;
        
        dataView.setUint8(currentPosition, descriptionData.byteLength);
        currentPosition += 1;
        new Uint8Array(binaryData).set(descriptionData, currentPosition);
        currentPosition += descriptionData.byteLength;
        
        dataView.setUint16(currentPosition, this.datePosted.getFullYear());
        dataView.setUint8(currentPosition + 2, this.datePosted.getMonth() + 1); // Correcting month for data storage
        dataView.setUint8(currentPosition + 3, this.datePosted.getDate());
        currentPosition += 4;
        
        new Uint8Array(binaryData).set(new Uint8Array(this.strategyDiagram), currentPosition);
        
        return binaryData;
    }
}

/*"""DELIMITER
A website dedicated to sharing tried-and-true ultimate frisbee strategies and game plans.