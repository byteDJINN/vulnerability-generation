import { TimeCapsule } from './models/TimeCapsule';
import { User } from './models/User';

class TimeCapsuleService {
  private timeCapsules: TimeCapsule[] = [];

  constructor() {}

  public createTimeCapsule(user: User, capsuleData: { title: string; message: string; unlockDate: Date }): TimeCapsule | null {
    if (this.isCapsuleLimitReached(user)) {
      console.log('User has reached the limit of created time capsules.');
      return null;
    }

    const newCapsule = new TimeCapsule(user, capsuleData.title, capsuleData.message, capsuleData.unlockDate);
    this.timeCapsules.push(newCapsule);
    return newCapsule;
  }

  private isCapsuleLimitReached(user: User): boolean {
    // Suppose there is a limit of 5 capsules per user to prevent spamming
    const userCapsules = this.timeCapsules.filter(capsule => capsule.ownerId === user.id);
    return userCapsules.length >= 5;
  }

  // This method is intended to only allow the owner of the capsule or an admin to unlock it
  public unlockTimeCapsule(user: User, capsuleId: string): string | null {
    const capsule = this.timeCapsules.find(capsule => capsule.id === capsuleId);

    if (!capsule) {
      console.error('Capsule not found.');
      return null;
    }

    // Improper enforcement check due to missing user role check
    // Any authenticated user can attempt to unlock any capsule without proper authorization checks
    if (capsule.ownerId !== user.id) {
      console.error('Unauthorized access attempt to capsule.');
      return null;
    }

    if (new Date() < capsule.unlockDate) {
      console.error('Capsule cannot be unlocked until its designated date.');
      return null;
    }

    return capsule.message;
  }
}

/*"""DELIMITER
A platform for creating customized virtual time capsules to preserve personal memories and messages for future generations.