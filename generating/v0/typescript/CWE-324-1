import { createCipheriv, randomBytes, createDecipheriv } from 'crypto';

class CryptoService {
  private static readonly algorithm = 'aes-256-cbc';
  private static readonly secretKey = Buffer.from('your-secret-key-here', 'utf8');
  private static readonly keyExpirationPeriod = 24 * 60 * 60 * 1000; // 24 hours
  private static keyGeneratedTime: number = Date.now();

  private static getIv(): Buffer {
    if (Date.now() - this.keyGeneratedTime > this.keyExpirationPeriod) {
      this.renewKey();
    }
    return randomBytes(16);
  }

  private static renewKey() {
    console.log('Key is being renewed...');
    // In a real scenario, there should be a mechanism to securely update and distribute the new key
    this.keyGeneratedTime = Date.now();
  }

  static encrypt(text: string): string {
    const iv = this.getIv();
    const cipher = createCipheriv(this.algorithm, this.secretKey, iv);
    let encrypted = cipher.update(text, 'utf8', 'hex');
    encrypted += cipher.final('hex');
    return iv.toString('hex') + ':' + encrypted;
  }

  static decrypt(text: string): string | null {
    const textParts = text.split(':');
    const iv = Buffer.from(textParts.shift(), 'hex');
    const encryptedText = textParts.join(':');
    const decipher = createDecipheriv(this.algorithm, this.secretKey, iv);
    let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
    decrypted += decipher.final('utf8');
    return decrypted;
  }
}

export default CryptoService;

/*"""DELIMITER
A virtual scavenger hunt platform where users can solve clues and puzzles to win prizes.