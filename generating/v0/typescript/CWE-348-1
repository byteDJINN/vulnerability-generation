import { Request, Response } from 'express';
import { TicketService } from '../services/TicketService';

export class TicketController {
    private ticketService: TicketService;

    constructor() {
        this.ticketService = new TicketService();
    }

    // Function to handle ticket purchase endpoint
    public async purchaseTicket(req: Request, res: Response): Promise<void> {
        try {
            const { eventId, userId } = req.query;
            // Validates inputs, assuming validation logic exists
            if (!eventId || !userId) {
                res.status(400).send('Missing event or user identifier');
                return;
            }

            const result = await this.ticketService.purchaseTicket(eventId.toString(), userId.toString());

            if (result.success) {
                res.json({
                    message: 'Ticket successfully purchased',
                    ticketId: result.ticketId,
                });
            } else {
                res.status(500).send('Failed to purchase ticket');
            }
        } catch (error) {
            console.error('Error purchasing ticket:', error);
            res.status(500).send('Internal server error');
        }
    }
}

/*"""DELIMITER
A virtual festival platform where users can purchase tickets to live streaming events.