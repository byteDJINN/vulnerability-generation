public User getUserInfo(String username) {
    String query = "(&(objectClass=user)(cn=" + username + "))";
    
    DirectorySearch search = new DirectorySearch();
    return search.searchUser(query);
}

/*"""DELIMITER
```
|CODE|```

Explanation:
The code snippet provided is vulnerable to LDAP Injection because it directly concatenates the `username` parameter into an LDAP query string without proper input validation or sanitization. In this scenario, an attacker can manipulate the `username` input to inject LDAP query commands that could alter the intended query behavior.

Exploitation:
An attacker can craft a malicious `username` input such as `(cn=*)(objectClass=*)` to modify the LDAP query string as follows: `(&(objectClass=user)(cn=*)(objectClass=*))`. This could potentially lead to unintended operations or unauthorized access to sensitive data stored in the LDAP server.

Fix:
To prevent LDAP Injection vulnerabilities, user input must be properly sanitized and validated before being included in LDAP queries. One way to mitigate this vulnerability is by using parameterized queries or input validation to ensure that the `username` input does not contain LDAP query commands. Additionally, input validation functions can be used to filter out special characters that could alter the structure of the LDAP query.