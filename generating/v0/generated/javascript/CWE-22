const fs = require('fs');
const path = '/path/to/directory/';

function readRestrictedFile(filename) {
    fs.readFile(path + filename, (err, data) => {
        if (err) {
            console.error(err);
            return;
        }
        console.log(data);
    });
}

readRestrictedFile('../../../etc/passwd');

/*"""DELIMITER
```
|CODE|```

Explanation of Vulnerability:
The vulnerability in the code snippet is due to the lack of proper input validation and handling in the `readRestrictedFile` function. The `filename` parameter is directly concatenated to the `path` variable without proper restrictions or sanitization, allowing an attacker to perform a path traversal attack. In this case, the attacker can provide a malicious filename like `../../../etc/passwd` to read sensitive system files outside of the intended directory.

How it could be exploited:
By providing a carefully crafted `filename` parameter such as `../../../etc/passwd`, an attacker can traverse the directory structure beyond the intended directory ('Path Traversal') and read sensitive files like the `/etc/passwd` file. This file often contains important system-related information that can be leveraged by the attacker.

How to fix the vulnerability:
To prevent 'Path Traversal' attacks, it is important to sanitize user input and validate the input filename before using it. One way to fix the vulnerability is to enforce a whitelist approach, allowing only specific files to be read. Another approach is to use a library that handles file operations securely, such as the `path` module in Node.js, to resolve the full path and check if it falls within the intended directory. Implementing proper input validation and sanitization is crucial to mitigate 'Path Traversal' vulnerabilities.