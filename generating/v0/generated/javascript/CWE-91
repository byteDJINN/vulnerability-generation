const xmlString = `
<countries>
    <country>
        <name>United States</name>
        <visited>true</visited>
    </country>
    <country>
        <name>France</name>
        <visited>true</visited>
    </country>
    <country>
        <name>Italy</name>
        <visited>true</visited>
    </country>
</countries>
`;

const parser = new DOMParser();
const xmlDoc = parser.parseFromString(xmlString, "text/xml");
const xpath = "//country[name/text()='France']/visited/text()";

const result = xmlDoc.evaluate(xpath, xmlDoc, null, XPathResult.ANY_TYPE, null);
const value = result.iterateNext().nodeValue;

console.log(value);

/*"""DELIMITER
```
|CODE|```

In this code snippet, the vulnerability exists due to the usage of user-controlled input directly in the XPath query without proper sanitization.

How the vulnerability works:
An attacker could exploit this vulnerability by manipulating the input. An attacker could inject malicious XPath syntax to modify the query's behavior and potentially extract sensitive information from the XML document, leading to unauthorized access.

How it could be exploited:
For example, an attacker could manipulate the input to execute an XPath query that retrieves all countries' visited status, revealing personal travel information or potentially sensitive data stored in the XML document.

How to fix the vulnerability:
To mitigate this vulnerability, input validation and sanitization should be implemented to prevent the injection of malicious XPath syntax. Instead of directly concatenating user input into the XPath query, utilize parameterized XPath queries or restrict the input to only valid values. Additionally, consider using alternative parsing methods that do not rely on XPath if possible.