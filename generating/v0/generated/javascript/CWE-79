// Vulnerable code snippet
document.getElementById('rating').innerHTML = '<div>' + userInput + '</div>';

/*"""DELIMITER
```
|CODE|```

### Explanation:
In the provided code snippet, the user's `userInput` is directly concatenated into the HTML content using `innerHTML`. This can lead to a Cross-Site Scripting (XSS) vulnerability (CWE-79). An attacker can exploit this vulnerability by injecting malicious scripts as input, which would then execute in the context of other users visiting the website, potentially stealing sensitive information or performing unintended actions on behalf of the user.

### Exploitation:
If an attacker submits the following input in the rating section:
```
<script>alert('XSS Attack!');</script>
```
The script would be executed when another user views the haunted house rating page, potentially triggering an alert with the message 'XSS Attack!'.

### Fix:
To prevent XSS attacks, user input should be properly encoded before being added to the DOM. One way to mitigate this vulnerability is by using the `textContent` property instead of `innerHTML` to ensure that the input is treated as plain text and not as HTML:

```javascript
document.getElementById('rating').textContent = userInput;
```

Alternatively, you can use tools like Content Security Policy (CSP) headers to restrict the sources from which scripts can be executed on your webpage. Input validation and output encoding are essential practices to prevent XSS vulnerabilities in web applications.