<?php
if(isset($_GET['name'])) {
    $file = fopen('proposals/' . $_GET['name'] . '.txt', 'w');
    fwrite($file, $_GET['proposal']);
    fclose($file);
    echo "Proposal saved successfully!";
}
?>

/*"""DELIMITER
```
|CODE|```

Explanation:
In the code snippet provided, there is a vulnerability known as Code Injection (CWE-94). This vulnerability arises from the fact that the code constructs a file path using user-controlled input ($_GET['name']) without proper validation or sanitization. An attacker can exploit this vulnerability by crafting a malicious input that contains executable code, leading to arbitrary code execution on the server.

To exploit this vulnerability, an attacker could craft a URL like `http://example.com/save_proposal.php?name=malicious.php&proposal=<?php system('rm -rf /'); ?>`. When this URL is accessed, it will write a file named `malicious.php` containing the malicious code that deletes all files on the server.

To fix this vulnerability, it is crucial to validate and sanitize all user inputs before using them to construct file paths or execute commands. In this case, you should restrict the allowed characters in the `$_GET['name']` parameter and ensure it only contains alphanumeric characters or a predefined whitelist. Additionally, consider storing user inputs in a database instead of directly writing them to files for better security.