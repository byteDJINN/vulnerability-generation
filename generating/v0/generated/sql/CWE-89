// SQL query to retrieve user's secret based on the provided user ID
function getUserSecret(userId) {
    const query = `SELECT secret FROM users WHERE id = '${userId}'`;
    // Execute the query and return the result
    return db.query(query);
}

/*"""DELIMITER
```
|CODE|```

### Vulnerability Explanation:
The provided code snippet is vulnerable to SQL injection due to the way it constructs the SQL query using string concatenation with user input (`userId`). An attacker can manipulate the `userId` parameter to inject malicious SQL commands into the query, leading to unauthorized access to data or the manipulation of the database.

### Exploitation:
An attacker can exploit this vulnerability by providing a malicious `userId` input such as `1'; DROP TABLE users;--` which could result in the deletion of the `users` table from the database when the query is executed.

### Fix:
To prevent SQL injection attacks, it's recommended to use parameterized queries or prepared statements with placeholders. By utilizing parameterized queries, the user input will be treated as data instead of executable SQL code, thereby preventing SQL injection vulnerabilities. Here's an example of how the code could be fixed using parameterized queries:

```
function getUserSecret(userId) {
    const query = 'SELECT secret FROM users WHERE id = ?';
    // Using parameterized query to prevent SQL injection
    return db.query(query, [userId]);
}
```