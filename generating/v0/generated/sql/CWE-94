// Retrieving grant proposals from the database based on freelancer's ID
function getGrantProposalsByFreelancerID($freelancerID) {
    $sql = "SELECT * FROM grant_proposals WHERE freelancer_id = " . $freelancerID;
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            echo "Title: " . $row["title"]. " - Description: " . $row["description"]. "<br>";
        }
    } else {
        echo "No grant proposals found for this freelancer.";
    }
}

/*"""DELIMITER
```
|CODE|```

Explanation:
The vulnerability in this code snippet lies in the SQL query construction in the `getGrantProposalsByFreelancerID` function. The function directly concatenates the `$freelancerID` variable into the SQL query without proper sanitization or parameterization. This could allow for SQL injection attacks where an attacker can manipulate the input to execute arbitrary SQL queries.

Exploitation:
An attacker could exploit this vulnerability by manipulating the `$freelancerID` parameter to include additional SQL commands. For example, if the attacker input `' OR 1=1 --`, the resulting SQL query would become:

```
SELECT * FROM grant_proposals WHERE freelancer_id = '' OR 1=1 --'
```

This would effectively bypass any authentication checks and return all grant proposals from the database, potentially exposing sensitive information.

Fix:
To mitigate SQL injection vulnerabilities, it is recommended to use prepared statements or parameterized queries with bound parameters to separate data from the query logic. This approach ensures that user input is treated as data rather than executable code. Here's an example of how the code snippet could be modified to prevent SQL injection:

```php
function getGrantProposalsByFreelancerID($freelancerID, $conn) {
    $sql = "SELECT * FROM grant_proposals WHERE freelancer_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $freelancerID);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            echo "Title: " . $row["title"]. " - Description: " . $row["description"]. "<br>";
        }
    } else {
        echo "No grant proposals found for this freelancer.";
    }
}
```

By using prepared statements and parameter binding, the vulnerability is mitigated as the input value is treated as data and not part of the SQL query structure.