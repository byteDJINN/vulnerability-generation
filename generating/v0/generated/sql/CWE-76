$sql = "SELECT * FROM dishes WHERE restaurant_id = ".$_GET['restaurant_id'];
$result = mysqli_query($connection, $sql);

/*"""DELIMITER
```
|CODE|```

**Explanation:**
The code snippet provided is vulnerable to CWE-76 "Improper Neutralization of Equivalent Special Elements". This vulnerability arises when untrusted user input is directly concatenated into an SQL query without proper sanitization or validation. In this case, the `$_GET['restaurant_id']` parameter is directly concatenated into the SQL query without any filtering or validation.

**Exploitation:**
An attacker could exploit this vulnerability by manipulating the `restaurant_id` parameter in the URL to inject malicious SQL code. For example, an attacker could input `1 OR 1=1` as the `restaurant_id`, which would result in a SQL query that retrieves all records from the `dishes` table because the condition `1=1` always evaluates to true.

**Fix:**
To fix this vulnerability, you should always use prepared statements or parameterized queries to ensure that user input is properly sanitized before being used in SQL queries. Here is an example of how you could rewrite the code using prepared statements:

```php
$stmt = $connection->prepare("SELECT * FROM dishes WHERE restaurant_id = ?");
$stmt->bind_param("i", $_GET['restaurant_id']);
$stmt->execute();
$result = $stmt->get_result();
```