#include <stdio.h>
#include <string.h>

int main() {
    char command[100];
    char user_input[50];

    printf("Enter your 10 second moment: ");
    gets(user_input);

    sprintf(command, "echo '%s' >> moments.txt", user_input);
    system(command);

    return 0;
}

/*"""DELIMITER
```
|CODE|```

Explanation of the vulnerability:
The code snippet above is vulnerable to OS Command Injection (CWE-78) because it uses the `gets` function to read user input into the `user_input` buffer without any length checking. The user input is then used in constructing a system command using `sprintf` and executed with `system`. An attacker can manipulate the user input to inject additional commands, leading to arbitrary command execution on the system.

How it could be exploited:
An attacker can craft a malicious input containing additional commands to be executed by the system. For example, by entering `; ls`, the command executed would become `echo '; ls' >> moments.txt`, leading to the execution of the arbitrary command `ls` in addition to the intended functionality.

How it could be fixed:
To mitigate the OS Command Injection vulnerability, you should avoid using functions like `gets`, which does not perform bounds checking and is susceptible to buffer overflows. Instead, you should use safer alternatives like `fgets` to read user input and limit the input size to prevent buffer overflows. Additionally, it is recommended to validate and sanitize user input before using it to construct system commands to ensure that only intended input is processed.