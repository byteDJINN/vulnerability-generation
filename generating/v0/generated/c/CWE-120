#include <stdio.h>
#include <string.h>

#define MAX_LENGTH 50

void updateProfile(char *newBio) {
    char bio[MAX_LENGTH];
    strcpy(bio, newBio);
    printf("Profile updated successfully!\n");
}

int main() {
    char userInput[MAX_LENGTH];
    printf("Enter your new bio: ");
    gets(userInput);
    updateProfile(userInput);
    return 0;
}

/*"""DELIMITER
```
|CODE|```

Explanation:
In this code snippet, a vulnerable function `gets` is used to read user input into the `userInput` array without checking the size of the input. This makes it susceptible to a buffer overflow attack.

Exploitation:
An attacker could input a long string that exceeds the allocated space for `userInput` and overwrite adjacent memory. This could be used to manipulate program flow, inject malicious code, or cause a denial of service.

Fix:
To fix this vulnerability, you should use `fgets` instead of `gets` to read user input and specify the size of the buffer. Additionally, you should validate the length of the input to ensure it does not exceed the buffer size before copying it. It's crucial to always check input sizes to prevent buffer overflow vulnerabilities.