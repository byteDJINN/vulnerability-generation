public string GetFileContent(string fileName)
{
    string filePath = $"C:\\Users\\Public\\Documents\\{fileName}";
    return File.ReadAllText(filePath);
}

/*"""DELIMITER
```csharp
|CODE|```

**Vulnerability Description:**
The code snippet above is vulnerable to Path Traversal attack due to improper limitation of the specified filepath. Path Traversal (CWE-22) occurs when an attacker is able to access files outside the intended directory by manipulating the file path. In this case, the filePath variable is constructed using a concatenation of the root directory path and the fileName provided as input, without proper validation.

**Exploitation:**
An attacker could exploit this vulnerability by inputting a fileName containing "../" or "..\" sequences to navigate up the directory tree and access sensitive files outside the intended directory. For example, if the file name provided is `"../../../../../../../Windows/System32/drivers/etc/hosts"`, the attacker could access the hosts file on the system.

**Fix:**
To mitigate the Path Traversal vulnerability, it is crucial to properly validate and sanitize the input file paths. One possible solution is to enforce a whitelist of allowed characters and prevent any attempt to navigate outside the intended directory. It is recommended to sanitize user input to ensure that only valid file names are accepted before constructing the file path. Additionally, using a secure file handling library or API that handles path traversal securely is recommended to prevent this vulnerability.