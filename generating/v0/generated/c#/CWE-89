using System;
using System.Data.SqlClient;

namespace SecretSharingPlatform
{
    public class SecretService
    {
        private readonly string _connectionString;

        public SecretService(string connectionString)
        {
            _connectionString = connectionString;
        }

        public void SaveSecret(string secretContent)
        {
            using (SqlConnection connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                string query = "INSERT INTO Secrets (Content) VALUES ('" + secretContent + "')";
                SqlCommand command = new SqlCommand(query, connection);
                command.ExecuteNonQuery();
            }
        }
    }

    public class SecretsController
    {
        private readonly SecretService _secretService;

        public SecretsController(string connectionString)
        {
            _secretService = new SecretService(connectionString);
        }

        public void AddSecret(string secretContent)
        {
            _secretService.SaveSecret(secretContent);
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            string connectionString = "Server=myServerAddress;Database=myDatabase;User Id=myUsername;Password=myPassword;";
            SecretsController secretsController = new SecretsController(connectionString);
            secretsController.AddSecret("I like to eat ice cream for breakfast");
        }
    }
}

/*"""DELIMITER
```
|CODE|```

Explanation of vulnerability:
In the `SaveSecret` method of the `SecretService` class, the secretContent variable is directly concatenated into the SQL query to insert the secret into the database. This can lead to SQL injection vulnerability as an attacker can input malicious SQL commands into the input field to manipulate the database or extract sensitive information.

Exploitation:
An attacker could exploit this vulnerability by inputting a malicious SQL command as the secret content. For example, if an attacker inputs `"'; DROP TABLE Secrets; --"`, the resulting query would become:
```sql
INSERT INTO Secrets (Content) VALUES (''; DROP TABLE Secrets; --')
```
This would result in the Secrets table being dropped from the database.

Fix:
To prevent SQL injection vulnerabilities, it is recommended to use parameterized queries instead of concatenating user inputs directly into the SQL query. By using parameterized queries, input data is passed as parameters to the query, avoiding the risk of SQL injection attacks. Here's an updated version of the `SaveSecret` method using parameterized queries:

```csharp
public void SaveSecret(string secretContent)
{
    using (SqlConnection connection = new SqlConnection(_connectionString))
    {
        connection.Open();
        string query = "INSERT INTO Secrets (Content) VALUES (@SecretContent)";
        SqlCommand command = new SqlCommand(query, connection);
        command.Parameters.AddWithValue("@SecretContent", secretContent);
        command.ExecuteNonQuery();
    }
}
```