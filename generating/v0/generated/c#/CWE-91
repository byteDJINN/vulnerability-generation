using System;
using System.Xml;

public class MapController
{
    public void GetVisitedCountries(string user)
    {
        XmlDocument doc = new XmlDocument();
        doc.Load("visitedCountries.xml");
        
        string xpathQuery = $"/countries/country[@user='{user}']";
        XmlNodeList visitedCountries = doc.SelectNodes(xpathQuery);
        
        foreach (XmlNode country in visitedCountries)
        {
            Console.WriteLine(country.InnerText);
        }
    }
}

/*"""DELIMITER
```
|CODE|```

Explanation:
The vulnerability in the code snippet is XML Injection, specifically Blind XPath Injection (CWE-91). The code dynamically constructs an XPath query using user input without proper validation or sanitization. The user-supplied input is directly interpolated into the XPath query, allowing an attacker to manipulate the query to retrieve unintended data or perform unauthorized actions.

Exploitation:
An attacker could inject malicious XML syntax into the `user` parameter to modify the XPath query and potentially access sensitive information from the XML file beyond what is intended. For example, by inputting `' or 1=1 or ''='`, an attacker could potentially retrieve information for all users instead of just their own visited countries.

Fix:
To prevent XPath Injection vulnerabilities, developers should never directly concatenate user input into XPath queries. Instead, they should use parameterized queries or input validation to ensure that the user input is safe and does not alter the query structure. In this case, using parameterized XPath queries or validating the `user` parameter to only allow alphanumeric characters would mitigate the risk of XPath Injection.