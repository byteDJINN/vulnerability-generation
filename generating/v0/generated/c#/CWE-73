using System;
using System.IO;

class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("Enter file name to read:");
        string fileName = Console.ReadLine();

        string filePath = "C:\\Files\\" + fileName; // Vulnerability CWE-73

        string fileContent = File.ReadAllText(filePath);
        Console.WriteLine("File content:\n" + fileContent);
    }
}

/*"""DELIMITER
```
|CODE|```

Explanation:
The vulnerability CWE-73, also known as "External Control of File Name or Path", occurs when the application allows user input to directly specify a file name or path without proper validation or sanitization. In the above code snippet, the user can input any file name which could be a malicious file and the application accesses that file without checking if the file exists or if the user has permission to access it.

Exploitation:
An attacker could exploit this vulnerability by inputting a file name of a sensitive file on the system, such as a password file, configuration file, or any other critical file. If the application runs with elevated privileges, the attacker could potentially access, modify, or delete sensitive files on the system.

Fix:
To fix this vulnerability, never directly concatenate user input with file paths. Instead, validate user input and use a whitelist approach to restrict file access to known safe locations. It's important to sanitize and validate user input to prevent directory traversal attacks and ensure that users have appropriate permissions to access the requested file. Use Path.Combine or similar methods to construct file paths safely.