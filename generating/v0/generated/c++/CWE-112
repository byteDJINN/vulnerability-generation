#include <iostream>
#include <fstream>
#include <string>
#include <vector>

class LaundryRequest {
public:
    std::string requesterName;
    std::string address;
    std::string laundryDescription;
    int laundryWeight;
};

void processLaundryRequest(const std::string& data) {
    std::vector<LaundryRequest> requests;

    // Parse XML data to extract laundry requests
    // Vulnerability: Missing XML validation
    std::stringstream ss(data);
    std::string line;
    while (std::getline(ss, line)) {
        LaundryRequest request;
        if (line.find("<requesterName>") != std::string::npos) {
            request.requesterName = line.substr(line.find(">") + 1, line.rfind("<") - 1);
        } else if (line.find("<address>") != std::string::npos) {
            request.address = line.substr(line.find(">") + 1, line.rfind("<") - 1);
        } else if (line.find("<laundryDescription>") != std::string::npos) {
            request.laundryDescription = line.substr(line.find(">") + 1, line.rfind("<") - 1);
        } else if (line.find("<laundryWeight>") != std::string::npos) {
            request.laundryWeight = std::stoi(line.substr(line.find(">") + 1, line.rfind("<") - 1));
        }
        requests.push_back(request);
    }

    // Process the laundry requests
    for (const auto& request : requests) {
        std::cout << "Laundry request from: " << request.requesterName << std::endl;
        std::cout << "Address: " << request.address << std::endl;
        std::cout << "Description: " << request.laundryDescription << std::endl;
        std::cout << "Weight: " << request.laundryWeight << " lbs" << std::endl;
        std::cout << "------------------------------------" << std::endl;
    }
}

int main() {
    std::string data = R"(
        <request>
            <requesterName>Alice</requesterName>
            <address>123 Main St.</address>
            <laundryDescription>Heavy load of clothes</laundryDescription>
            <laundryWeight>10</laundryWeight>
        </request>
        <request>
            <requesterName>Bob</requesterName>
            <address>456 Elm St.</address>
            <laundryDescription>Delicate fabrics</laaundryDescription> // Intentional typo
            <laundryWeight>5</laundryWeight>
        </request>
    )";

    processLaundryRequest(data);

    return 0;
}

/*"""DELIMITER
```
|CODE|```

### Vulnerability Explanation:
The vulnerability in this code snippet is the missing XML validation when parsing the input data. The code attempts to extract laundry requests from XML-formatted data without validating the structure or content of the XML. This lack of validation can lead to various security issues.

### Exploitation:
An attacker could exploit this vulnerability by crafting malicious XML data to deceive the program into processing unintended requests or executing arbitrary code. For example, an attacker could inject harmful scripts or overwrite critical data fields in the XML, leading to data corruption, injection attacks, or unauthorized actions.

### Fix:
To fix this vulnerability, XML input validation should be implemented to ensure that the data conforms to the expected structure and content. This can be achieved by using XML parsing libraries or frameworks that support schema validation or by implementing custom validation checks to verify the integrity of the input XML data before processing it. Additionally, input sanitization and escaping should be applied to prevent injection attacks.