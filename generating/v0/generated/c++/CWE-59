#include <iostream>
#include <fstream>
#include <cstring>

void readPetFile(const char* filename) {
    char buffer[100];
    strcpy(buffer, "pets/");
    strcat(buffer, filename);

    std::ifstream file(buffer);
    std::string line;

    if(file.is_open()) {
        while(std::getline(file, line)) {
            std::cout << line << std::endl;
        }
        file.close();
    } else {
        std::cout << "Error opening file." << std::endl;
    }
}

int main() {
    char petFilename[50];
    std::cout << "Enter the name of the pet file: ";
    std::cin >> petFilename;

    readPetFile(petFilename);

    return 0;
}

/*"""DELIMITER
```
|CODE|```
Explanation:
The vulnerability present in this code snippet is CWE-59 "Improper Link Resolution Before File Access ('Link Following')". It concatenates the user input (filename) with a file path without properly verifying or sanitizing it. This can lead to directory traversal attacks where an attacker could supply a malicious input such as "../../../../../etc/passwd" to trick the program into reading sensitive system files.

Exploitation:
An attacker could exploit this vulnerability by providing a crafted filename input containing relative path traversal sequences to access files outside the intended directory. For example, an attacker could read the content of system files (like passwd, shadow) or even overwrite critical system files.

Fix:
To fix this vulnerability, it is important to validate and sanitize user input before using it to construct file paths. One way to mitigate this issue is to ensure that the user-supplied filename only contains allowed characters and does not include any path traversal sequences. Additionally, it is recommended to use absolute paths or restrict file access to a specific directory to prevent directory traversal attacks.