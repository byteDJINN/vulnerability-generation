#include <iostream>
#include <cstring>

void updateProfile(char* input) {
    char profile[50];
    strcpy(profile, input);
    
    std::cout << "Profile updated successfully!" << std::endl;
}

int main() {
    char userInput[100];
    
    std::cout << "Enter your new profile information: ";
    std::cin.getline(userInput, sizeof(userInput));
    
    updateProfile(userInput);
    
    return 0;
}

/*"""DELIMITER
```
|CODE|```

Explanation:
In the code snippet provided, the vulnerability lies in the `updateProfile` function where the `strcpy` function is used to copy user input into a fixed-size buffer `profile`. The buffer size is set to 50 characters but the `userInput` buffer in the `main` function is defined to be 100 characters long. This could lead to a buffer overflow if the user enters more than 50 characters, causing the excess input to overwrite adjacent memory locations, potentially leading to a crash or even arbitrary code execution.

Exploitation:
An attacker could exploit this vulnerability by providing input longer than 50 characters, which could overwrite the return address on the stack and redirect the program's execution flow to malicious code supplied by the attacker. This could be used to gain unauthorized access, escalate privileges, or perform other malicious activities on the system.

Fix:
To fix this vulnerability, you should use safer functions like `strncpy` or `strlcpy` which allow you to specify the maximum number of characters to copy and prevent buffer overflows. Additionally, dynamically allocating memory based on the input size would also be a more secure approach to prevent buffer overflows. Remember always to validate and sanitize user input to prevent unexpected behavior and security vulnerabilities.