#include <iostream>
#include <fstream>
#include <string>

void uploadFile(std::string fileName) {
    std::string filePath = "/var/www/uploads/" + fileName;  // Vulnerability here
    std::ofstream file(filePath);
    if (file.is_open()) {
        file << "File contents";
        file.close();
        std::cout << "File uploaded successfully!\n";
    } else {
        std::cout << "Unable to upload file.\n";
    }
}

int main() {
    std::string userInput;
    std::cout << "Enter file name to upload: ";
    std::cin >> userInput;

    uploadFile(userInput);

    return 0;
}

/*"""DELIMITER
```
|CODE|```
### Vulnerability Explanation:
The vulnerability in the code above is known as Path Traversal (CWE-22). It occurs when an application allows users to access files outside the intended directory by manipulating input that references files to parts of the file system outside of the restricted directory.

### Exploitation:
An attacker can exploit this vulnerability by providing a file name with "../" characters to navigate backwards in the file system and access sensitive files or directories. For example, if the attacker inputs "../../../../etc/passwd", it could potentially overwrite or read system files like the passwd file.

### Fix:
To fix this vulnerability, always sanitize and validate user input. In this case, validate the file name input to ensure it does not contain any "../" characters or any other malicious characters that could lead to path traversal. Additionally, consider using a whitelist approach to only allow specific characters in the file name input. Furthermore, it's recommended to store uploaded files in a separate directory outside of the web root to prevent direct access to sensitive system files.