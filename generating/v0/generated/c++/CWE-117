#include <iostream>
#include <fstream>
#include <string>

// Function to log user activity
void logUserActivity(std::string username, std::string activity) {
    std::ofstream logfile("user_activity_log.txt", std::ios_base::app);
    
    if (logfile.is_open()) {
        logfile << "Username: " << username << " - Activity: " << activity << std::endl;
        std::cout << "Activity logged successfully!" << std::endl;
        logfile.close();
    } else {
        std::cerr << "Error opening log file" << std::endl;
    }
}

int main() {
    std::string username = "John_Doe";
    std::string activity = "Viewed blog post about Paris";

    logUserActivity(username, activity);

    return 0;
}

/*"""DELIMITER
```
|CODE|```

**Vulnerability Explanation:**
The vulnerability in this code snippet is CWE-117 "Improper Output Neutralization for Logs". The `logUserActivity` function takes two string inputs - `username` and `activity` - and writes them directly to a log file without properly neutralizing any special characters. This could allow an attacker to inject malicious input containing special characters or newlines into the log file, potentially manipulating the logging system or causing it to log something unintended.

**Exploitation:**
An attacker could exploit this vulnerability by passing in a username or activity containing special characters such as newline characters ('\n'), carriage return characters ('\r'), or escape characters (';'). For example, an attacker could craft a special username or activity like `"attacker\nInjected malicious code"` which could lead to unexpected behavior in the logging system or other parts of the application.

**Fix:**
To fix this vulnerability, it is important to properly neutralize the input before writing it to the log file. This can be done by sanitizing the input strings to remove any special characters or escape sequences that could potentially affect the log file. One way to achieve this is by using a function like `std::regex_replace` to replace any unwanted characters with sanitized versions before logging them. Another approach could be to use a logging library that automatically sanitizes the input to prevent log injection attacks.