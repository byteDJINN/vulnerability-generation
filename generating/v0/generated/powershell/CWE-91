Param (
    [string]$country
)

# Connect to the XML file storing user travel data
$xml = [xml](Get-Content "travel_data.xml")

# Construct XPath query based on user input
$query = "/countries/country[@name='$country']"

# Query XML for the specified country
$countryNode = $xml.SelectSingleNode($query)

if ($countryNode -ne $null) {
    Write-Host "$countryNode"
} else {
    Write-Host "Country not found in the travel log."
}

/*"""DELIMITER
```
|CODE|```

Explanation:
The vulnerability in the code snippet is XML Injection (CWE-91), also known as Blind XPath Injection. This vulnerability occurs when user input is not properly sanitized before being included in an XPath query, allowing an attacker to manipulate the query for malicious purposes.

An attacker could exploit this vulnerability by manipulating the "country" input parameter to inject malicious XPath queries. For example, by inputting `$country = "'] | //password | /countries/country[@name='`, an attacker could potentially extract sensitive information like passwords stored in the XML file.

To fix this vulnerability, it is crucial to sanitize and validate user input before using it in XPath queries. One way to mitigate this issue is to use parameterized XPath queries or restrict the input to specific allowed values to prevent malicious manipulation. Additionally, input validation and encoding should always be applied to prevent injection attacks.