import ldap

def search_user(username):
    server = 'ldap://example.com'
    conn = ldap.initialize(server)
    
    query = "(uid=" + username + ")"
    
    conn.search("ou=users,dc=example,dc=com", ldap.SCOPE_SUBTREE, query)
    
    result = conn.result()
    
    return result

/*"""DELIMITER
```
|CODE|```

Explanation:
The code snippet above is a function that takes a username input, constructs an LDAP query using the input without proper sanitization, and searches for the user within the LDAP directory. The vulnerability lies in the `query` variable where the username input is directly concatenated into the query string without any validation or escaping. This makes the code susceptible to LDAP Injection attacks.

Exploitation:
An attacker could exploit this vulnerability by inputting LDAP injection payloads as the username parameter to manipulate the LDAP query. For example, if an attacker provides a malicious input like `*)(cn=*)` as the username, the resulting LDAP query could be something like `(uid=*)(cn=*)`, which could return all user entries in the LDAP directory, potentially exposing sensitive information.

Fix:
To fix this vulnerability, user input should be properly sanitized and escaped before constructing the LDAP query. The recommended approach is to use parameterized queries or input validation to ensure that the user input does not contain any LDAP query syntax. This can help prevent LDAP Injection attacks and protect the application from unauthorized access to sensitive data.