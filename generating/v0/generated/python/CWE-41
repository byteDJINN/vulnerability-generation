import os

def get_custom_gifts(category):
    base_dir = '/custom_gifts/'
    file_path = os.path.join(base_dir, category + '.txt')
    
    with open(file_path, 'r') as file:
        content = file.read()
    
    return content

/*"""DELIMITER
```
|CODE|```

### Vulnerability Explanation:
The vulnerability in the code snippet is due to the improper resolution of the file path in the `get_custom_gifts` function. The `category` parameter passed to the function is directly concatenated with the base directory path without proper input validation or sanitization. An attacker can manipulate the `category` input to traverse up directories or access sensitive files on the server.

### How It Could Be Exploited:
An attacker could craft a malicious `category` value such as `../../../../../etc/passwd` to traverse up directories and read the `/etc/passwd` file, which could contain sensitive information like user credentials.

### How to Fix It:
To fix this issue, you should validate and sanitize the input before constructing the file path. One way to mitigate this vulnerability is to use a whitelist approach, where only permitted values are allowed for the category input. Another approach is to use a library that properly handles file paths, like `os.path.abspath()` or `pathlib.Path()`, to ensure that the resolved file path is safe and restricted to the intended directory.