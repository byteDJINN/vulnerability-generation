package main

import (
    "fmt"
    "net/http"
)

func main() {
    http.HandleFunc("/customize-island", func(w http.ResponseWriter, r *http.Request) {
        islandName := r.FormValue("name")
        query := fmt.Sprintf("SELECT * FROM islands WHERE name = '%s'", islandName)
        // Execute query to fetch island details from database
        // Display island customization options to the user
    })

    http.ListenAndServe(":8080", nil)
}

/*"""DELIMITER
```
|CODE|``` 

This code snippet contains an LDAP Injection vulnerability in the `islandName` variable when constructing the SQL query. 
An attacker could exploit this vulnerability by inputting something like `islandName = 'fake' OR '1'='1` as the value for `name`. This would result in modifying the query to `SELECT * FROM islands WHERE name = 'fake' OR '1'='1'`, which would always evaluate to true and return details for all islands from the database instead of the intended island.

To fix this vulnerability, it is recommended to use parameterized queries or ORM libraries to safely handle user input without allowing it to modify the structure of the query directly. Additionally, input validation and sanitization should be performed to prevent malicious input.