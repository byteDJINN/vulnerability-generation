package main

import (
	"fmt"
	"net/http"
	"os"
)

func main() {
	http.HandleFunc("/feed", func(w http.ResponseWriter, r *http.Request) {
		petName := r.URL.Query().Get("pet")
		filePath := fmt.Sprintf("/var/www/virtual_pets/%s/food.txt", petName)
		file, err := os.Open(filePath)
		if err != nil {
			http.Error(w, "Pet not found", http.StatusNotFound)
			return
		}
		defer file.Close()

		food := make([]byte, 1024)
		_, err = file.Read(food)
		if err != nil {
			http.Error(w, "Error reading file", http.StatusInternalServerError)
			return
		}

		w.Write([]byte(fmt.Sprintf("Feeding %s: %s", petName, food)))
	})

	http.ListenAndServe(":8080", nil)
}

/*"""DELIMITER
```
|CODE|```
### Explanation:
The vulnerability in this code snippet lies in the file path construction and file access logic. The code dynamically constructs a file path using user input without proper validation or sanitization. This allows an attacker to manipulate the `pet` query parameter to access arbitrary files on the server, leading to unauthorized access to sensitive information.

### Exploitation:
An attacker can manipulate the `pet` query parameter to traverse the file system and access files they are not supposed to, such as configuration files, user data, or any other sensitive information stored on the server.

For example, an attacker could craft a request like `http://example.com/feed?pet=../../../../../etc/passwd` to access the `/etc/passwd` file on the server.

### Fix:
To prevent the CWE-59 vulnerability, you should avoid constructing file paths based on user input directly. Instead, limit the paths to a specific directory or predefined paths and validate the input against a whitelist of allowed values. In this case, you should maintain a mapping between pet names and their corresponding files securely on the server without relying on user input for file access.

Additionally, you should perform proper input validation and sanitization to prevent directory traversal attacks. Always validate and sanitize user inputs before using them to construct paths or perform file operations.