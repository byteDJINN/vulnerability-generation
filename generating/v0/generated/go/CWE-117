package main

import (
	"fmt"
	"log"
	"net/http"
)

func main() {
	http.HandleFunc("/getTip", getTipHandler)
	log.Fatal(http.ListenAndServe(":8080", nil))
}

func getTipHandler(w http.ResponseWriter, r *http.Request) {
	destinationCity := r.URL.Query().Get("city")
	travelerName := r.URL.Query().Get("name")
	
	log.Printf("User %s requested a tip for %s", travelerName, destinationCity)
	
	tip := getTravelTip(destinationCity)
	fmt.Fprintf(w, "Hello %s, here's a tip for your visit to %s: %s", travelerName, destinationCity, tip)
}

func getTravelTip(destinationCity string) string {
	// Returns a tip for the specified destination city
	return "Don't forget to visit the local park for a relaxing picnic!"
}

/*"""DELIMITER
```
|CODE|```

Explanation of the vulnerability:

The vulnerability in this code snippet lies in the `getTipHandler` function where user-supplied inputs (`travelerName` and `destinationCity`) are being directly logged using `log.Printf`. This could lead to a log injection attack as an attacker can input malicious data that could affect the integrity and security of the logs.

How it could be exploited:

An attacker could manipulate the input parameters in the URL query string to include newline characters, format specifiers, or any other special characters to inject malicious content into the logs. For example, an attacker could input a traveler name like `"; DROP TABLE users --` which would result in an SQL injection attack when logged.

How it could be fixed:

To fix this vulnerability, it is important to properly sanitize and escape user-supplied inputs before logging them. One approach could be to use a safe logging library that handles input sanitization automatically. Alternatively, you could manually sanitize the input by stripping out any special characters or formatting characters before logging them. It is important to always validate and sanitize user input to prevent injection attacks.