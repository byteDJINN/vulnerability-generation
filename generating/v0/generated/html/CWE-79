<!DOCTYPE html>
<html>
<head>
    <title>Haunted House Experiences</title>
</head>
<body>
    <h1>Welcome to the Haunted House Experiences!</h1>
    <p>Please share your spookiest experience:</p>
    <input type="text" id="hauntedInput">
    <button onclick="submitExperience()">Submit</button>
    <div id="experienceList"></div>

    <script>
        function submitExperience() {
            var userInput = document.getElementById('hauntedInput').value;
            document.getElementById('experienceList').innerHTML += '<p>' + userInput + '</p>';
        }
    </script>
</body>
</html>

/*"""DELIMITER
```
|CODE|```
The vulnerability in this code snippet is a Cross-Site Scripting (XSS) vulnerability. 

Explanation:
1. The code takes user input from the text field without properly validating or encoding it.
2. The user input is directly added to the HTML content of the page without sanitization, allowing an attacker to inject malicious scripts.
3. An attacker can exploit this vulnerability by submitting a crafted input (e.g., `<script>alert('XSS Attack');</script>`) that will be executed in other users' browsers when viewing the shared haunted house experiences.

Fix:
To prevent XSS attacks, user input must be properly sanitized and encoded before being included in HTML content. You can use functions like `textContent` or `innerHTML` encoding to mitigate this vulnerability. Alternatively, you can use server-side input validation and output encoding to ensure that user input is safe to display on the website.