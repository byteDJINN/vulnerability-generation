import express from 'express';
import * as fs from 'fs';

const app = express();

app.get('/bloggers/:id', (req, res) => {
  const bloggerId = req.params.id;
  
  const bloggerData = fs.readFileSync(`bloggers/${bloggerId}.json`, 'utf8');

  // Logging blogger data for debugging purposes
  fs.appendFileSync('logs.txt', `Blogger data: ${bloggerData}\n`);

  res.json(JSON.parse(bloggerData));
});

app.listen(3000, () => {
  console.log('Server is running on port 3000');
});

/*"""DELIMITER
```
|CODE|```

Explanation:
The code snippet above creates an API endpoint `/bloggers/:id` that reads blogger data from a JSON file based on the provided blogger ID. After reading the data, it appends the blogger data to a log file named `logs.txt`.

Vulnerability:
The vulnerability in this code snippet is that the `bloggerData` is directly logged to the file without proper input validation or sanitization. This could potentially allow an attacker to inject malicious data into the log file, leading to log forging or content injection attacks.

Exploitation:
An attacker could abuse this vulnerability by crafting a blogger ID that contains special characters or escape sequences that, when logged directly, could alter the structure of the log file or include executable commands.

Fix:
To fix this vulnerability, always validate and sanitize user input before logging it. In this case, you can sanitize the `bloggerData` variable by escaping special characters or removing any potentially harmful content before logging it. Alternatively, ensure that only safe data is logged or implement a logging mechanism that automatically sanitizes user input before logging it.