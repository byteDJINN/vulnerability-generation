// This code snippet contains the CWE-76 vulnerability

const userInput = '<script>alert("Exploit!")</script>';

const userMessage = `Thank you for designing your buffet experience with the following ingredients: ${userInput}`;

document.getElementById('userMessage').innerHTML = userMessage;

/*"""DELIMITER
```
|CODE|```

### Vulnerability Explanation:
The code snippet above is vulnerable to CWE-76 "Improper Neutralization of Equivalent Special Elements". In this case, the user input `userInput` is being directly inserted into an HTML element by setting its `innerHTML` property. This can lead to a Cross-Site Scripting (XSS) vulnerability if an attacker inserts malicious code as the input.

### Exploitation:
An attacker could exploit this vulnerability by submitting input containing JavaScript code, such as `<script>alert("Exploit!")</script>`. When this input is rendered on the website, the JavaScript code will be executed in the context of other users' browsers, leading to unauthorized actions like showing pop-up alerts or stealing sensitive information.

### Fix:
To fix this vulnerability, you should perform proper input validation and encoding operations to neutralize special characters before inserting user input into the HTML. In this case, you can use the `innerText` property instead of `innerHTML` to set the text content, ensuring that the input is treated as plain text and not interpreted as HTML code. Another approach is to use a library that provides HTML encoding functions to escape special characters before rendering the user input on the webpage.