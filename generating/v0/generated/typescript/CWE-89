import { db } from './database';

function fetchSecret(secretId: number) {
    const query = `SELECT * FROM secrets WHERE secretId = ${secretId}`;
    return db.query(query);
}

/*"""DELIMITER
```
|CODE|```

Explanation:
The vulnerability in the code snippet is a SQL Injection vulnerability. In the `fetchSecret` function, the `secretId` parameter is directly interpolated into the SQL query without proper sanitization or validation. An attacker could exploit this vulnerability by inputting a malicious SQL query as the `secretId` parameter, which could lead to unauthorized access to the database or manipulation of the data.

To fix this vulnerability, you should use parameterized queries or prepared statements to sanitize user input before building the SQL query. Parameterized queries separate the SQL logic from the user input, preventing malicious input from altering the query structure. This mitigates the risk of SQL Injection attacks. Here's an example of how to fix the code snippet using parameterized queries:

```typescript
import { db } from './database';

function fetchSecret(secretId: number) {
    const query = 'SELECT * FROM secrets WHERE secretId = ?';
    return db.query(query, [secretId]);
}
```

In this fixed version, the `secretId` is passed as a parameter to the `db.query` method, ensuring that it is treated as a value rather than being directly concatenated into the SQL query. This approach prevents SQL Injection attacks by separating data from the query logic.