import fs from "fs";

function saveFile(fileName: string, data: string) {
    fs.writeFileSync(`/var/www/uploads/${fileName}`, data);
}

const fileName = process.argv[2]; // External input

saveFile(fileName, "Some data to save");

/*"""DELIMITER
```typescript
|CODE|```

Explanation of the vulnerability:
- CWE-73, "External Control of File Name or Path", arises when user-controlled inputs are used to directly construct file paths for file I/O operations without proper validation. This can lead to arbitrary files being read from or written to, potentially allowing attackers to manipulate critical system files.

How it could be exploited:
- An attacker could provide a malicious file name input, such as "../../../somefile.txt", which could manipulate the path and potentially overwrite system files or read sensitive information.

How to fix the vulnerability:
- To fix this vulnerability, avoid directly using user inputs for file paths. Instead, sanitize and validate the input to ensure it only contains allowed characters and path structures. You can use libraries like `path` in Node.js to manipulate file paths safely. Additionally, consider storing uploaded files in a separate directory outside of the web root to restrict direct access to critical system files.