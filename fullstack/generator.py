import random
import re

import os
from dotenv import load_dotenv
load_dotenv()

from openai import OpenAI
client = OpenAI(
    api_key = os.getenv("OPENAI_API_KEY")
)


numberOfFiles = "5"
technology = "Flask"

response = client.chat.completions.create(
    model="gpt-3.5-turbo",
    messages=[
        {
        "role": "user",
        "content": "Give me a random idea for a website in one sentence",
        }
    ],
    temperature=1.6,
    stop=[],
    )
websiteIdea = response.choices[0].message.content
print("Website Idea: " + websiteIdea)

response = client.chat.completions.create(
    model="gpt-3.5-turbo",
    messages=[
        {
        "role": "user",
        "content": f"""
        Give me a list of {numberOfFiles} files and what each would contain to create the following website using {technology}.
        For simplicity, all {numberOfFiles} files will be in the same directory. Do not output any directory names, only the filenames. 
        Do not output any paths, only the names of the files. 
        \n""" + websiteIdea
        }
    ],
    temperature=1,
    stop=[],
    )

websiteDesign = response.choices[0].message.content
print("Website Design: " + websiteDesign)

response = client.chat.completions.create(
    model="gpt-4",
    messages=[
        {
            "role": "system",
            "content": """
            You write complete website code, with no unfinished sections. You are a developer, all the code you write must work if run and there should be no errors. 
            If you need multiple files, respond with multiple code blocks. The line before each code block should be a single word that is the name of the file.
            """,
        },
        {
        "role": "user",
        "content": f"""
        Write the full website code, including all {numberOfFiles} files and including all the code. 
        Each file should be at least 100 lines. For each file, have a single line with no markdown formatting containing the filename, followed by the start of a code block ``` on the next line.
        All your output code should be complete and runnable. It should be a complete implementation with no unfinished code and no placeholders. 
        \n
        """ + websiteDesign
        }
    ],
    temperature=1,
    stop=[],
    )
websiteCode = response.choices[0].message.content
print(websiteCode)

# use regex to search for code and the line before which should contain filename 
# capture two regex groups
data = re.findall(r"(?P<filename>[a-zA-Z]+\.[a-zA-Z]+).*?```.*?\n(?P<code>.*?)\n```", websiteCode, re.DOTALL)

# write code to files in directory
directory = "code"
# erase directory with walk
for root, dirs, files in os.walk(directory):
    for file in files:
        os.remove(os.path.join(root, file))

for filename, code in data:
    with open(f"{directory}/{filename}", "w") as file:
        file.write(code)
        print(f"File {filename} written")

assert(False)

response = client.chat.completions.create(
    model="gpt-3.5-turbo",
    messages=[
        {
        "role": "user",
        "content": "Given this code, explain how CWE-022 could be introduced into the code in 2-3 sentences. Do not respond with any code. \n" + websiteCode
        }
    ],
    temperature=1,
    stop=[],
    )
methodToVulnerability = response.choices[0].message.content
print(methodToVulnerability)

response = client.chat.completions.create(
    model="gpt-4",
    messages=[
        {
            "role": "system",
            "content": """
            You write website code, always include a dockerfile that would run the website. 
            If you need multiple files, respond with multiple code blocks. The line before each code block should be a single word that is the name of the file.
            Do not use any markdown formatting. 
            Always respond with all the files containing all the code. 
            """,
        },
        {
        "role": "user",
        "content": """
        Change the code so that this website has the vulnerability specified.
        Do not exploit the vulnerability, just make the code vulnerable. 
        Do not make it obvious that there is a vulnerability, make it realistic. 
        Respond with all the code files containing all the code for the entire website.
        """ + methodToVulnerability + "\n" + websiteCode
        }
    ],
    temperature=1,
    stop=[],
    )
vulnerableCode = response.choices[0].message.content
print(vulnerableCode)

# use regex to search for code and the line before which should contain filename 
# capture two regex groups
codeBlocks = re.findall(r"\n(.+)\n```.*?\n(.*?)```", vulnerableCode, re.DOTALL)

# write code to files in directory
directory = "code"
# erase directory with walk
for root, dirs, files in os.walk(directory):
    for file in files:
        os.remove(os.path.join(root, file))

for codeBlock in codeBlocks:
    filename = codeBlock[0]
    code = codeBlock[1]
    with open(f"{directory}/{filename}", "w") as file:
        file.write(code)
        print(f"File {filename} written")
