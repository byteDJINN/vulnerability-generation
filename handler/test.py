import DS

data = DS.Handler("../input/diversevul_3.json")

print(data.length(DS.SINGLE))
print(data.length(DS.MULTI))
print(data.length(DS.ALL))

with open("output.c", "w") as f:
    for partition in zip([DS.SINGLE, DS.MULTI, DS.ALL], ["SINGLE", "MULTI", "ALL"]):
        for context in zip([DS.PURE, DS.SEMANTIC, DS.FULL], ["PURE", "SEMANTIC", "FULL"]):
            f.write(f"Partition: {partition[1]}, Context: {context[1]}\n")
            vuln, safe = data.get(0, partition=partition[0], context=context[0])
            f.write("Vulnerable functions:\n")
            for string in vuln:
                if string is None:
                    continue
                f.write(string)
                f.write("\n")
            f.write("Safe functions:\n")
            for string in safe:
                if string is None:
                    continue
                f.write(string)
                f.write("\n")

c1 = 0
c2 = 0
for i in range(data.length(DS.ALL)):
    for context in [DS.PURE, DS.SEMANTIC]: # not doing DS.FULL for this example
        vuln, safe = data.get(i, DS.ALL, context)
        # print number of None out of total
        c1 += sum([1 for i in vuln if i is None])
        c1 += sum([1 for i in safe if i is None])
        c2 += len(vuln) + len(safe)
    print(f"{c1}/{c2} ({c1/c2*100:.0f}%)")

